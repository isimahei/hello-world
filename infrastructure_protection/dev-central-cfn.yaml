AWSTemplateFormatVersion: "2010-09-09"
Description: "AWS GameDay Quests - Stack for deployment into a Developer account."

Parameters:  
  # Parameters required to deploy the AWS GameDay Quests Development Kit
  gdQuestsEEAssetsBucketPrefix:
    Default: "ee-assets-prod-"
    Description: The S3 Bucket name prefix containing deployment artifacts for the AWS GameDay Quests Development Kit - Please do not modify.
    Type: String
  gdQuestsEEAssetsKeyPrefix:
    Default: "modules/9c0e89820b864addaed45ec2f5440379/v2/"
    Description: The S3 key prefix used to locate deployment artifacts for the AWS GameDay Quests Development Kit - Please do not modify.
    Type: String
  gdQuestsLambdaSourceKey:
    Default: "gameday-quests-api-lambda-source.zip"
    Description: The S3 Key for the Lamda source code used by the AWS GameDay Quests API
    Type: String

  # Parameters that are to be supplied by a Quest Developer
  devAssetsBucket:
    Description: The name of the S3 Bucket that contains all development artifacts. Objects in this bucket must be able to be read by CloudFormation whilst deploying this template.
    Type: String

  devAssetsKeyPrefix:
    Default: "modules/9c0e89820b864addaed45ec2f5440379/v2/"
    Description: The S3 key prefix used to locate all development artifacts within the devAssetsBucket.
    Type: String

  devDeploymentArtifactSource:
    AllowedValues:
    - Development
    - EventEngine
    Default: EventEngine
    Description: The source location of Deployment Artifacts. Must be either 'Development' or 'EventEngine'. Defaults to 'EventEngine'.
    Type: String

  devQuestsData:
    Default: dev-quests-data.json
    Description: The name of the quests-data.json file that contains all quest information that will be loaded in to this event.
    Type: String 

Conditions:
  DeployFromEE: !Equals [ !Ref devDeploymentArtifactSource, EventEngine ]


Resources:

  # ╔══════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════╗
  # ║ API Gateway Resources                                                                                                                                    ║
  # ╠═══════════════════════════════╤═════════════════════════════╤════════════════════════════════════════════════════════════════════════════════════════════╣
  # ║ ApiGatewayAccount             │ AWS::ApiGateway::Account    │ Configures the role that API Gateway will use to log data to CloudWatch Logs               ║
  # ║ ApiGatewayDeployment          │ AWS::ApiGateway::Deployment │ Deploys the Quests API Gateway                                                             ║
  # ║ ApiGatewayRestApi             │ AWS::ApiGateway::RestApi    │ Defines the Quests API Gateway                                                             ║
  # ╚═══════════════════════════════╧═════════════════════════════╧════════════════════════════════════════════════════════════════════════════════════════════╝
  ApiGatewayAccount:
    Type: AWS::ApiGateway::Account
    Properties:
      CloudWatchRoleArn: !GetAtt IamRoleApiGateway.Arn  
  
  ApiGatewayDeployment:
    Type: AWS::ApiGateway::Deployment
    Properties:
      RestApiId: !Ref ApiGatewayRestApi
      StageName: LATEST

  ApiGatewayRestApi:
    Type: AWS::ApiGateway::RestApi
    Properties: 
      Name: gdQuests-api
      Description: AWS GameDay Quests API Gateway
      FailOnWarnings: true
      ApiKeySourceType: AUTHORIZER 
      Body:
        swagger: "2.0"
        info:
          description: "AWS GameDay Quests API Gateway"
          version: "2020-06-11T00:00:00Z"
          title: "gdQuests-api"
        basePath: "/LATEST"
        schemes:
        - "https"
        paths:
          /event/status:
            get:
              consumes:
              - "application.json"
              produces:
              - "application/json"
              responses:
                "200":
                  description: "200 response"
                  headers:
                    Access-Control-Allow-Origin:
                      type: "string"
                "400":
                  description: "400 response"
                  headers:
                    Access-Control-Allow-Origin:
                      type: "string"
                "404":
                  description: "404 response"
                  headers:
                    Access-Control-Allow-Origin:
                      type: "string"
                "500":
                  description: "500 response"
                  headers:
                    Access-Control-Allow-Origin:
                      type: "string"
              security:
              - ApiAuthorizer: []
              x-amazon-apigateway-integration:
                credentials: !GetAtt IamRoleApiGateway.Arn
                uri: !Join
                - ''
                - - 'arn:aws:apigateway:'
                  - !Ref AWS::Region
                  - ':lambda:path/2015-03-31/functions/'
                  - !GetAtt LambdaGetEventStatus.Arn
                  - '/invocations'
                responses:
                  default:
                    statusCode: "200"
                    responseParameters:
                      method.response.header.Access-Control-Allow-Origin: "'*'"
                  ".*\"errorType\"\\s*:\\s*\"BadRequest\".*":
                    statusCode: "400"
                    responseTemplates:
                      application/json: "#set ($errorMessageObj = $util.parseJson($input.path('$.errorMessage')))\r\
                        \n{\r\n  \"error\" : \"$errorMessageObj.message\"\r\n}"
                  ".*\"errorType\"\\s*:\\s*\"NotFound\".*":
                    statusCode: "404"
                    responseTemplates:
                      application/json: "#set ($errorMessageObj = $util.parseJson($input.path('$.errorMessage')))\r\
                        \n{\r\n  \"error\" : \"$errorMessageObj.message\"\r\n}"
                  ".*\"errorType\"\\s*:\\s*\"InternalServerError\".*":
                    statusCode: "500"
                    responseTemplates:
                      application/json: "#set ($errorMessageObj = $util.parseJson($input.path('$.errorMessage')))\r\
                        \n{\r\n  \"error\" : \"$errorMessageObj.message\"\r\n}"
                requestTemplates:
                  application/json: "$input.json(\"$.body\")"
                passthroughBehavior: "when_no_match"
                httpMethod: "POST"
                type: "aws"
            options:
              consumes:
              - "application/json"
              produces:
              - "application/json"
              responses:
                "200":
                  description: "200 response"
                  schema:
                    $ref: "#/definitions/Empty"
                  headers:
                    Access-Control-Allow-Origin:
                      type: "string"
                    Access-Control-Allow-Methods:
                      type: "string"
                    Access-Control-Allow-Headers:
                      type: "string"
              security:
              - ApiAuthorizer: []
              x-amazon-apigateway-integration:
                responses:
                  default:
                    statusCode: "200"
                    responseParameters:
                      method.response.header.Access-Control-Allow-Methods: "'GET,OPTIONS'"
                      method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
                      method.response.header.Access-Control-Allow-Origin: "'*'"
                requestTemplates:
                  application/json: "{\"statusCode\": 200}"
                passthroughBehavior: "when_no_match"
                type: "mock"
          /inputs/{team-id}/{quest-id}/{key}:
            delete:
              consumes:
              - "application.json"
              produces:
              - "application/json"
              parameters:
              - name: "team-id"
                in: "path"
                required: true
                type: "string"
              - name: "quest-id"
                in: "path"
                required: true
                type: "string"
              - name: "key"
                in: "path"
                required: true
                type: "string"
              responses:
                "200":
                  description: "200 response"
                  headers:
                    Access-Control-Allow-Origin:
                      type: "string"
                "400":
                  description: "400 response"
                  headers:
                    Access-Control-Allow-Origin:
                      type: "string"
                "404":
                  description: "404 response"
                  headers:
                    Access-Control-Allow-Origin:
                      type: "string"
                "500":
                  description: "500 response"
                  headers:
                    Access-Control-Allow-Origin:
                      type: "string"
              security:
              - ApiAuthorizer: []
              x-amazon-apigateway-integration:
                credentials: !GetAtt IamRoleApiGateway.Arn
                uri: !Join
                - ''
                - - 'arn:aws:apigateway:'
                  - !Ref AWS::Region
                  - ':lambda:path/2015-03-31/functions/'
                  - !GetAtt LambdaDeleteInput.Arn
                  - '/invocations'
                responses:
                  default:
                    statusCode: "200"
                    responseParameters:
                      method.response.header.Access-Control-Allow-Origin: "'*'"
                  ".*\"errorType\"\\s*:\\s*\"BadRequest\".*":
                    statusCode: "400"
                    responseTemplates:
                      application/json: "#set ($errorMessageObj = $util.parseJson($input.path('$.errorMessage')))\r\
                        \n{\r\n  \"error\" : \"$errorMessageObj.message\"\r\n}"
                  ".*\"errorType\"\\s*:\\s*\"NotFound\".*":
                    statusCode: "404"
                    responseTemplates:
                      application/json: "#set ($errorMessageObj = $util.parseJson($input.path('$.errorMessage')))\r\
                        \n{\r\n  \"error\" : \"$errorMessageObj.message\"\r\n}"
                  ".*\"errorType\"\\s*:\\s*\"InternalServerError\".*":
                    statusCode: "500"
                    responseTemplates:
                      application/json: "#set ($errorMessageObj = $util.parseJson($input.path('$.errorMessage')))\r\
                        \n{\r\n  \"error\" : \"$errorMessageObj.message\"\r\n}"
                requestTemplates:
                  application/json: "{\"team-id\": \"$input.params('team-id')\", \"quest-id\": \"$input.params('quest-id')\", \"key\": \"$input.params('key')\"}"
                passthroughBehavior: "when_no_match"
                httpMethod: "POST"
                type: "aws"
            get:
              consumes:
              - "application.json"
              produces:
              - "application/json"
              parameters:
              - name: "team-id"
                in: "path"
                required: true
                type: "string"
              - name: "quest-id"
                in: "path"
                required: true
                type: "string"
              - name: "key"
                in: "path"
                required: true
                type: "string"
              responses:
                "200":
                  description: "200 response"
                  headers:
                    Access-Control-Allow-Origin:
                      type: "string"
                "400":
                  description: "400 response"
                  headers:
                    Access-Control-Allow-Origin:
                      type: "string"
                "404":
                  description: "404 response"
                  headers:
                    Access-Control-Allow-Origin:
                      type: "string"
                "500":
                  description: "500 response"
                  headers:
                    Access-Control-Allow-Origin:
                      type: "string"
              security:
              - ApiAuthorizer: []
              x-amazon-apigateway-integration:
                credentials: !GetAtt IamRoleApiGateway.Arn
                uri: !Join
                - ''
                - - 'arn:aws:apigateway:'
                  - !Ref AWS::Region
                  - ':lambda:path/2015-03-31/functions/'
                  - !GetAtt LambdaGetInput.Arn
                  - '/invocations'
                responses:
                  default:
                    statusCode: "200"
                    responseParameters:
                      method.response.header.Access-Control-Allow-Origin: "'*'"
                  ".*\"errorType\"\\s*:\\s*\"BadRequest\".*":
                    statusCode: "400"
                    responseTemplates:
                      application/json: "#set ($errorMessageObj = $util.parseJson($input.path('$.errorMessage')))\r\
                        \n{\r\n  \"error\" : \"$errorMessageObj.message\"\r\n}"
                  ".*\"errorType\"\\s*:\\s*\"NotFound\".*":
                    statusCode: "404"
                    responseTemplates:
                      application/json: "#set ($errorMessageObj = $util.parseJson($input.path('$.errorMessage')))\r\
                        \n{\r\n  \"error\" : \"$errorMessageObj.message\"\r\n}"
                  ".*\"errorType\"\\s*:\\s*\"InternalServerError\".*":
                    statusCode: "500"
                    responseTemplates:
                      application/json: "#set ($errorMessageObj = $util.parseJson($input.path('$.errorMessage')))\r\
                        \n{\r\n  \"error\" : \"$errorMessageObj.message\"\r\n}"
                requestTemplates:
                  application/json: "{\"team-id\": \"$input.params('team-id')\", \"quest-id\": \"$input.params('quest-id')\", \"key\": \"$input.params('key')\"}"
                passthroughBehavior: "when_no_match"
                httpMethod: "POST"
                type: "aws"
            post:
              consumes:
              - "application.json"
              produces:
              - "application/json"
              parameters:
              - name: "team-id"
                in: "path"
                required: true
                type: "string"
              - name: "quest-id"
                in: "path"
                required: true
                type: "string"
              - name: "key"
                in: "path"
                required: true
                type: "string"
              responses:
                "200":
                  description: "200 response"
                  headers:
                    Access-Control-Allow-Origin:
                      type: "string"
                "400":
                  description: "400 response"
                  headers:
                    Access-Control-Allow-Origin:
                      type: "string"
                "404":
                  description: "404 response"
                  headers:
                    Access-Control-Allow-Origin:
                      type: "string"
                "500":
                  description: "500 response"
                  headers:
                    Access-Control-Allow-Origin:
                      type: "string"
              security:
              - ApiAuthorizer: []
              x-amazon-apigateway-integration:
                credentials: !GetAtt IamRoleApiGateway.Arn
                uri: !Join
                - ''
                - - 'arn:aws:apigateway:'
                  - !Ref AWS::Region
                  - ':lambda:path/2015-03-31/functions/'
                  - !GetAtt LambdaPostInput.Arn
                  - '/invocations'
                requestParameters:
                  integration.request.path.team-id: "method.request.path.team-id"
                  integration.request.path.quest-id: "method.request.path.quest-id"
                  integration.request.path.key: "method.request.path.key"
                requestTemplates:
                  application/json: "{\"team-id\": \"$input.params('team-id')\", \"quest-id\": \"$input.params('quest-id')\", \"key\": \"$input.params('key')\", \"label\": $input.json('$.label'), \"description\": $input.json('$.description')}"
                responses:
                  default:
                    statusCode: "200"
                    responseParameters:
                      method.response.header.Access-Control-Allow-Origin: "'*'"
                  ".*\"errorType\"\\s*:\\s*\"BadRequest\".*":
                    statusCode: "400"
                    responseTemplates:
                      application/json: "#set ($errorMessageObj = $util.parseJson($input.path('$.errorMessage')))\r\
                        \n{\r\n  \"error\" : \"$errorMessageObj.message\"\r\n}"
                  ".*\"errorType\"\\s*:\\s*\"NotFound\".*":
                    statusCode: "404"
                    responseTemplates:
                      application/json: "#set ($errorMessageObj = $util.parseJson($input.path('$.errorMessage')))\r\
                        \n{\r\n  \"error\" : \"$errorMessageObj.message\"\r\n}"
                  ".*\"errorType\"\\s*:\\s*\"InternalServerError\".*":
                    statusCode: "500"
                    responseTemplates:
                      application/json: "#set ($errorMessageObj = $util.parseJson($input.path('$.errorMessage')))\r\
                        \n{\r\n  \"error\" : \"$errorMessageObj.message\"\r\n}"
                passthroughBehavior: "when_no_match"
                httpMethod: "POST"
                type: "aws"
            options:
              consumes:
              - "application/json"
              produces:
              - "application/json"
              responses:
                "200":
                  description: "200 response"
                  schema:
                    $ref: "#/definitions/Empty"
                  headers:
                    Access-Control-Allow-Origin:
                      type: "string"
                    Access-Control-Allow-Methods:
                      type: "string"
                    Access-Control-Allow-Headers:
                      type: "string"
              security:
              - ApiAuthorizer: []
              x-amazon-apigateway-integration:
                responses:
                  default:
                    statusCode: "200"
                    responseParameters:
                      method.response.header.Access-Control-Allow-Methods: "'DELETE,GET,OPTIONS,POST'"
                      method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
                      method.response.header.Access-Control-Allow-Origin: "'*'"
                requestTemplates:
                  application/json: "{\"statusCode\": 200}"
                passthroughBehavior: "when_no_match"
                type: "mock"
          /outputs/{team-id}/{quest-id}/{key}:
            delete:
              consumes:
              - "application.json"
              produces:
              - "application/json"
              parameters:
              - name: "team-id"
                in: "path"
                required: true
                type: "string"
              - name: "quest-id"
                in: "path"
                required: true
                type: "string"
              - name: "key"
                in: "path"
                required: true
                type: "string"
              responses:
                "200":
                  description: "200 response"
                  headers:
                    Access-Control-Allow-Origin:
                      type: "string"
                "400":
                  description: "400 response"
                  headers:
                    Access-Control-Allow-Origin:
                      type: "string"
                "404":
                  description: "404 response"
                  headers:
                    Access-Control-Allow-Origin:
                      type: "string"
                "500":
                  description: "500 response"
                  headers:
                    Access-Control-Allow-Origin:
                      type: "string"
              security:
              - ApiAuthorizer: []
              x-amazon-apigateway-integration:
                credentials: !GetAtt IamRoleApiGateway.Arn
                uri: !Join
                - ''
                - - 'arn:aws:apigateway:'
                  - !Ref AWS::Region
                  - ':lambda:path/2015-03-31/functions/'
                  - !GetAtt LambdaDeleteOutput.Arn
                  - '/invocations'
                responses:
                  default:
                    statusCode: "200"
                    responseParameters:
                      method.response.header.Access-Control-Allow-Origin: "'*'"
                  ".*\"errorType\"\\s*:\\s*\"BadRequest\".*":
                    statusCode: "400"
                    responseTemplates:
                      application/json: "#set ($errorMessageObj = $util.parseJson($input.path('$.errorMessage')))\r\
                        \n{\r\n  \"error\" : \"$errorMessageObj.message\"\r\n}"
                  ".*\"errorType\"\\s*:\\s*\"NotFound\".*":
                    statusCode: "404"
                    responseTemplates:
                      application/json: "#set ($errorMessageObj = $util.parseJson($input.path('$.errorMessage')))\r\
                        \n{\r\n  \"error\" : \"$errorMessageObj.message\"\r\n}"
                  ".*\"errorType\"\\s*:\\s*\"InternalServerError\".*":
                    statusCode: "500"
                    responseTemplates:
                      application/json: "#set ($errorMessageObj = $util.parseJson($input.path('$.errorMessage')))\r\
                        \n{\r\n  \"error\" : \"$errorMessageObj.message\"\r\n}"
                requestTemplates:
                  application/json: "{\"team-id\": \"$input.params('team-id')\", \"quest-id\": \"$input.params('quest-id')\", \"key\": \"$input.params('key')\"}"
                passthroughBehavior: "when_no_match"
                httpMethod: "POST"
                type: "aws"
            post:
              consumes:
              - "application.json"
              produces:
              - "application/json"
              parameters:
              - name: "team-id"
                in: "path"
                required: true
                type: "string"
              - name: "quest-id"
                in: "path"
                required: true
                type: "string"
              - name: "key"
                in: "path"
                required: true
                type: "string"
              responses:
                "200":
                  description: "200 response"
                  headers:
                    Access-Control-Allow-Origin:
                      type: "string"
                "400":
                  description: "400 response"
                  headers:
                    Access-Control-Allow-Origin:
                      type: "string"
                "404":
                  description: "404 response"
                  headers:
                    Access-Control-Allow-Origin:
                      type: "string"
                "500":
                  description: "500 response"
                  headers:
                    Access-Control-Allow-Origin:
                      type: "string"
              security:
              - ApiAuthorizer: []
              x-amazon-apigateway-integration:
                credentials: !GetAtt IamRoleApiGateway.Arn
                uri: !Join
                - ''
                - - 'arn:aws:apigateway:'
                  - !Ref AWS::Region
                  - ':lambda:path/2015-03-31/functions/'
                  - !GetAtt LambdaPostOutput.Arn
                  - '/invocations'
                requestParameters:
                  integration.request.path.team-id: "method.request.path.team-id"
                  integration.request.path.quest-id: "method.request.path.quest-id"
                  integration.request.path.key: "method.request.path.key"
                requestTemplates:
                  application/json: "{\"team-id\": \"$input.params('team-id')\", \"quest-id\": \"$input.params('quest-id')\", \"key\": \"$input.params('key')\", \"label\": $input.json('$.label'), \"value\": $input.json('$.value'), \"dashboard-index\": $input.json('$.dashboard-index'), \"markdown\": $input.json('$.markdown'), \"description\": $input.json('$.description')}"
                responses:
                  default:
                    statusCode: "200"
                    responseParameters:
                      method.response.header.Access-Control-Allow-Origin: "'*'"
                  ".*\"errorType\"\\s*:\\s*\"BadRequest\".*":
                    statusCode: "400"
                    responseTemplates:
                      application/json: "#set ($errorMessageObj = $util.parseJson($input.path('$.errorMessage')))\r\
                        \n{\r\n  \"error\" : \"$errorMessageObj.message\"\r\n}"
                  ".*\"errorType\"\\s*:\\s*\"NotFound\".*":
                    statusCode: "404"
                    responseTemplates:
                      application/json: "#set ($errorMessageObj = $util.parseJson($input.path('$.errorMessage')))\r\
                        \n{\r\n  \"error\" : \"$errorMessageObj.message\"\r\n}"
                  ".*\"errorType\"\\s*:\\s*\"InternalServerError\".*":
                    statusCode: "500"
                    responseTemplates:
                      application/json: "#set ($errorMessageObj = $util.parseJson($input.path('$.errorMessage')))\r\
                        \n{\r\n  \"error\" : \"$errorMessageObj.message\"\r\n}"
                passthroughBehavior: "when_no_match"
                httpMethod: "POST"
                type: "aws"
            options:
              consumes:
              - "application/json"
              produces:
              - "application/json"
              responses:
                "200":
                  description: "200 response"
                  schema:
                    $ref: "#/definitions/Empty"
                  headers:
                    Access-Control-Allow-Origin:
                      type: "string"
                    Access-Control-Allow-Methods:
                      type: "string"
                    Access-Control-Allow-Headers:
                      type: "string"
              security:
              - ApiAuthorizer: []
              x-amazon-apigateway-integration:
                responses:
                  default:
                    statusCode: "200"
                    responseParameters:
                      method.response.header.Access-Control-Allow-Methods: "'DELETE,OPTIONS,POST'"
                      method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
                      method.response.header.Access-Control-Allow-Origin: "'*'"
                requestTemplates:
                  application/json: "{\"statusCode\": 200}"
                passthroughBehavior: "when_no_match"
                type: "mock"
          /quests:
            get:
              consumes:
              - "application.json"
              produces:
              - "application/json"
              responses:
                "200":
                  description: "200 response"
                  headers:
                    Access-Control-Allow-Origin:
                      type: "string"
                "400":
                  description: "400 response"
                  headers:
                    Access-Control-Allow-Origin:
                      type: "string"
                "404":
                  description: "404 response"
                  headers:
                    Access-Control-Allow-Origin:
                      type: "string"
                "500":
                  description: "500 response"
                  headers:
                    Access-Control-Allow-Origin:
                      type: "string"
              security:
              - ApiAuthorizer: []
              x-amazon-apigateway-integration:
                credentials: !GetAtt IamRoleApiGateway.Arn
                uri: !Join
                - ''
                - - 'arn:aws:apigateway:'
                  - !Ref AWS::Region
                  - ':lambda:path/2015-03-31/functions/'
                  - !GetAtt LambdaGetAllQuests.Arn
                  - '/invocations'
                responses:
                  default:
                    statusCode: "200"
                    responseParameters:
                      method.response.header.Access-Control-Allow-Origin: "'*'"
                  ".*\"errorType\"\\s*:\\s*\"BadRequest\".*":
                    statusCode: "400"
                    responseTemplates:
                      application/json: "#set ($errorMessageObj = $util.parseJson($input.path('$.errorMessage')))\r\
                        \n{\r\n  \"error\" : \"$errorMessageObj.message\"\r\n}"
                  ".*\"errorType\"\\s*:\\s*\"NotFound\".*":
                    statusCode: "404"
                    responseTemplates:
                      application/json: "#set ($errorMessageObj = $util.parseJson($input.path('$.errorMessage')))\r\
                        \n{\r\n  \"error\" : \"$errorMessageObj.message\"\r\n}"
                  ".*\"errorType\"\\s*:\\s*\"InternalServerError\".*":
                    statusCode: "500"
                    responseTemplates:
                      application/json: "#set ($errorMessageObj = $util.parseJson($input.path('$.errorMessage')))\r\
                        \n{\r\n  \"error\" : \"$errorMessageObj.message\"\r\n}"
                requestTemplates:
                  application/json: "$input.json(\"$.body\")"
                passthroughBehavior: "when_no_match"
                httpMethod: "POST"
                type: "aws"
            options:
              consumes:
              - "application/json"
              produces:
              - "application/json"
              responses:
                "200":
                  description: "200 response"
                  schema:
                    $ref: "#/definitions/Empty"
                  headers:
                    Access-Control-Allow-Origin:
                      type: "string"
                    Access-Control-Allow-Methods:
                      type: "string"
                    Access-Control-Allow-Headers:
                      type: "string"
              security:
              - ApiAuthorizer: []
              x-amazon-apigateway-integration:
                responses:
                  default:
                    statusCode: "200"
                    responseParameters:
                      method.response.header.Access-Control-Allow-Methods: "'GET,OPTIONS'"
                      method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
                      method.response.header.Access-Control-Allow-Origin: "'*'"
                requestTemplates:
                  application/json: "{\"statusCode\": 200}"
                passthroughBehavior: "when_no_match"
                type: "mock"
          /quests/{quest-id}:
            get:
              consumes:
              - "application.json"
              produces:
              - "application/json"
              parameters:
              - name: "quest-id"
                in: "path"
                required: true
                type: "string"
              responses:
                "200":
                  description: "200 response"
                  headers:
                    Access-Control-Allow-Origin:
                      type: "string"
                "400":
                  description: "400 response"
                  headers:
                    Access-Control-Allow-Origin:
                      type: "string"
                "404":
                  description: "404 response"
                  headers:
                    Access-Control-Allow-Origin:
                      type: "string"
                "500":
                  description: "500 response"
                  headers:
                    Access-Control-Allow-Origin:
                      type: "string"
              security:
              - ApiAuthorizer: []
              x-amazon-apigateway-integration:
                credentials: !GetAtt IamRoleApiGateway.Arn
                uri: !Join
                - ''
                - - 'arn:aws:apigateway:'
                  - !Ref AWS::Region
                  - ':lambda:path/2015-03-31/functions/'
                  - !GetAtt LambdaGetOneQuest.Arn
                  - '/invocations'
                responses:
                  default:
                    statusCode: "200"
                    responseParameters:
                      method.response.header.Access-Control-Allow-Origin: "'*'"
                  ".*\"errorType\"\\s*:\\s*\"BadRequest\".*":
                    statusCode: "400"
                    responseTemplates:
                      application/json: "#set ($errorMessageObj = $util.parseJson($input.path('$.errorMessage')))\r\
                        \n{\r\n  \"error\" : \"$errorMessageObj.message\"\r\n}"
                  ".*\"errorType\"\\s*:\\s*\"NotFound\".*":
                    statusCode: "404"
                    responseTemplates:
                      application/json: "#set ($errorMessageObj = $util.parseJson($input.path('$.errorMessage')))\r\
                        \n{\r\n  \"error\" : \"$errorMessageObj.message\"\r\n}"
                  ".*\"errorType\"\\s*:\\s*\"InternalServerError\".*":
                    statusCode: "500"
                    responseTemplates:
                      application/json: "#set ($errorMessageObj = $util.parseJson($input.path('$.errorMessage')))\r\
                        \n{\r\n  \"error\" : \"$errorMessageObj.message\"\r\n}"
                requestTemplates:
                  application/json: "{\"quest-id\": \"$input.params('quest-id')\"}"
                passthroughBehavior: "when_no_match"
                httpMethod: "POST"
                type: "aws"
            options:
              consumes:
              - "application/json"
              produces:
              - "application/json"
              responses:
                "200":
                  description: "200 response"
                  schema:
                    $ref: "#/definitions/Empty"
                  headers:
                    Access-Control-Allow-Origin:
                      type: "string"
                    Access-Control-Allow-Methods:
                      type: "string"
                    Access-Control-Allow-Headers:
                      type: "string"
              security:
              - ApiAuthorizer: []
              x-amazon-apigateway-integration:
                responses:
                  default:
                    statusCode: "200"
                    responseParameters:
                      method.response.header.Access-Control-Allow-Methods: "'GET,OPTIONS'"
                      method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
                      method.response.header.Access-Control-Allow-Origin: "'*'"
                requestTemplates:
                  application/json: "{\"statusCode\": 200}"
                passthroughBehavior: "when_no_match"
                type: "mock"
          /quests/{quest-id}/hints:
            get:
              consumes:
              - "application.json"
              produces:
              - "application/json"
              parameters:
              - name: "quest-id"
                in: "path"
                required: true
                type: "string"
              responses:
                "200":
                  description: "200 response"
                  headers:
                    Access-Control-Allow-Origin:
                      type: "string"
                "400":
                  description: "400 response"
                  headers:
                    Access-Control-Allow-Origin:
                      type: "string"
                "404":
                  description: "404 response"
                  headers:
                    Access-Control-Allow-Origin:
                      type: "string"
                "500":
                  description: "500 response"
                  headers:
                    Access-Control-Allow-Origin:
                      type: "string"
              security:
              - ApiAuthorizer: []
              x-amazon-apigateway-integration:
                credentials: !GetAtt IamRoleApiGateway.Arn
                uri: !Join
                - ''
                - - 'arn:aws:apigateway:'
                  - !Ref AWS::Region
                  - ':lambda:path/2015-03-31/functions/'
                  - !GetAtt LambdaGetHintsForQuest.Arn
                  - '/invocations'
                responses:
                  default:
                    statusCode: "200"
                    responseParameters:
                      method.response.header.Access-Control-Allow-Origin: "'*'"
                  ".*\"errorType\"\\s*:\\s*\"BadRequest\".*":
                    statusCode: "400"
                    responseTemplates:
                      application/json: "#set ($errorMessageObj = $util.parseJson($input.path('$.errorMessage')))\r\
                        \n{\r\n  \"error\" : \"$errorMessageObj.message\"\r\n}"
                  ".*\"errorType\"\\s*:\\s*\"NotFound\".*":
                    statusCode: "404"
                    responseTemplates:
                      application/json: "#set ($errorMessageObj = $util.parseJson($input.path('$.errorMessage')))\r\
                        \n{\r\n  \"error\" : \"$errorMessageObj.message\"\r\n}"
                  ".*\"errorType\"\\s*:\\s*\"InternalServerError\".*":
                    statusCode: "500"
                    responseTemplates:
                      application/json: "#set ($errorMessageObj = $util.parseJson($input.path('$.errorMessage')))\r\
                        \n{\r\n  \"error\" : \"$errorMessageObj.message\"\r\n}"
                requestTemplates:
                  application/json: "{\"quest-id\": \"$input.params('quest-id')\"}"
                passthroughBehavior: "when_no_match"
                httpMethod: "POST"
                type: "aws"
            post:
              consumes:
              - "application.json"
              produces:
              - "application/json"
              parameters:
              - name: "quest-id"
                in: "path"
                required: true
                type: "string"
              responses:
                "200":
                  description: "200 response"
                  headers:
                    Access-Control-Allow-Origin:
                      type: "string"
                "400":
                  description: "400 response"
                  headers:
                    Access-Control-Allow-Origin:
                      type: "string"
                "404":
                  description: "404 response"
                  headers:
                    Access-Control-Allow-Origin:
                      type: "string"
                "500":
                  description: "500 response"
                  headers:
                    Access-Control-Allow-Origin:
                      type: "string"
              security:
              - ApiAuthorizer: []
              x-amazon-apigateway-integration:
                credentials: !GetAtt IamRoleApiGateway.Arn
                uri: !Join
                - ''
                - - 'arn:aws:apigateway:'
                  - !Ref AWS::Region
                  - ':lambda:path/2015-03-31/functions/'
                  - !GetAtt LambdaPostHintForQuest.Arn
                  - '/invocations'
                requestParameters:
                  integration.request.path.quest-id: "method.request.path.quest-id"
                requestTemplates:
                  application/json: "{\"quest-id\": \"$input.params('quest-id')\", \"key\": $input.json('$.key'), \"label\": $input.json('$.label'), \"description\": $input.json('$.description'), \"value\": $input.json('$.value'), \"dashboard-index\": $input.json('$.dashboard-index'), \"cost\": $input.json('$.cost'), \"enable-time\": $input.json('$.enable-time'), \"disable-time\": $input.json('$.disable-time'), \"automatic\": $input.json('$.automatic')}"
                responses:
                  default:
                    statusCode: "200"
                    responseParameters:
                      method.response.header.Access-Control-Allow-Origin: "'*'"
                  ".*\"errorType\"\\s*:\\s*\"BadRequest\".*":
                    statusCode: "400"
                    responseTemplates:
                      application/json: "#set ($errorMessageObj = $util.parseJson($input.path('$.errorMessage')))\r\
                        \n{\r\n  \"error\" : \"$errorMessageObj.message\"\r\n}"
                  ".*\"errorType\"\\s*:\\s*\"NotFound\".*":
                    statusCode: "404"
                    responseTemplates:
                      application/json: "#set ($errorMessageObj = $util.parseJson($input.path('$.errorMessage')))\r\
                        \n{\r\n  \"error\" : \"$errorMessageObj.message\"\r\n}"
                  ".*\"errorType\"\\s*:\\s*\"InternalServerError\".*":
                    statusCode: "500"
                    responseTemplates:
                      application/json: "#set ($errorMessageObj = $util.parseJson($input.path('$.errorMessage')))\r\
                        \n{\r\n  \"error\" : \"$errorMessageObj.message\"\r\n}"
                passthroughBehavior: "when_no_match"
                httpMethod: "POST"
                type: "aws"
            options:
              consumes:
              - "application/json"
              produces:
              - "application/json"
              responses:
                "200":
                  description: "200 response"
                  schema:
                    $ref: "#/definitions/Empty"
                  headers:
                    Access-Control-Allow-Origin:
                      type: "string"
                    Access-Control-Allow-Methods:
                      type: "string"
                    Access-Control-Allow-Headers:
                      type: "string"
              security:
              - ApiAuthorizer: []
              x-amazon-apigateway-integration:
                responses:
                  default:
                    statusCode: "200"
                    responseParameters:
                      method.response.header.Access-Control-Allow-Methods: "'GET,POST,OPTIONS'"
                      method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
                      method.response.header.Access-Control-Allow-Origin: "'*'"
                requestTemplates:
                  application/json: "{\"statusCode\": 200}"
                passthroughBehavior: "when_no_match"
                type: "mock"
          /quests/{quest-id}/hints/{key}:
            patch:
              consumes:
              - "application.json"
              produces:
              - "application/json"
              parameters:
              - name: "quest-id"
                in: "path"
                required: true
                type: "string"
              - name: "key"
                in: "path"
                required: true
                type: "string"
              responses:
                "200":
                  description: "200 response"
                  headers:
                    Access-Control-Allow-Origin:
                      type: "string"
                "400":
                  description: "400 response"
                  headers:
                    Access-Control-Allow-Origin:
                      type: "string"
                "404":
                  description: "404 response"
                  headers:
                    Access-Control-Allow-Origin:
                      type: "string"
                "500":
                  description: "500 response"
                  headers:
                    Access-Control-Allow-Origin:
                      type: "string"
              security:
              - ApiAuthorizer: []
              x-amazon-apigateway-integration:
                credentials: !GetAtt IamRoleApiGateway.Arn
                uri: !Join
                - ''
                - - 'arn:aws:apigateway:'
                  - !Ref AWS::Region
                  - ':lambda:path/2015-03-31/functions/'
                  - !GetAtt LambdaUpdateHintForQuest.Arn
                  - '/invocations'
                requestParameters:
                  integration.request.path.quest-id: "method.request.path.quest-id"
                  integration.request.path.key: "method.request.path.key"
                requestTemplates:
                  application/json: "{\"quest-id\": \"$input.params('quest-id')\", \"key\": $input.params('key'), \"label\": $input.json('$.label'), \"description\": $input.json('$.description'), \"value\": $input.json('$.value'), \"dashboard-index\": $input.json('$.dashboard-index'), \"cost\": $input.json('$.cost'), \"enable-time\": $input.json('$.enable-time'), \"disable-time\": $input.json('$.disable-time'), \"automatic\": $input.json('$.automatic')}"
                responses:
                  default:
                    statusCode: "200"
                    responseParameters:
                      method.response.header.Access-Control-Allow-Origin: "'*'"
                  ".*\"errorType\"\\s*:\\s*\"BadRequest\".*":
                    statusCode: "400"
                    responseTemplates:
                      application/json: "#set ($errorMessageObj = $util.parseJson($input.path('$.errorMessage')))\r\
                        \n{\r\n  \"error\" : \"$errorMessageObj.message\"\r\n}"
                  ".*\"errorType\"\\s*:\\s*\"NotFound\".*":
                    statusCode: "404"
                    responseTemplates:
                      application/json: "#set ($errorMessageObj = $util.parseJson($input.path('$.errorMessage')))\r\
                        \n{\r\n  \"error\" : \"$errorMessageObj.message\"\r\n}"
                  ".*\"errorType\"\\s*:\\s*\"InternalServerError\".*":
                    statusCode: "500"
                    responseTemplates:
                      application/json: "#set ($errorMessageObj = $util.parseJson($input.path('$.errorMessage')))\r\
                        \n{\r\n  \"error\" : \"$errorMessageObj.message\"\r\n}"
                passthroughBehavior: "when_no_match"
                httpMethod: "POST"
                type: "aws"
            options:
              consumes:
              - "application/json"
              produces:
              - "application/json"
              responses:
                "200":
                  description: "200 response"
                  schema:
                    $ref: "#/definitions/Empty"
                  headers:
                    Access-Control-Allow-Origin:
                      type: "string"
                    Access-Control-Allow-Methods:
                      type: "string"
                    Access-Control-Allow-Headers:
                      type: "string"
              security:
              - ApiAuthorizer: []
              x-amazon-apigateway-integration:
                responses:
                  default:
                    statusCode: "200"
                    responseParameters:
                      method.response.header.Access-Control-Allow-Methods: "'PATCH,OPTIONS'"
                      method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
                      method.response.header.Access-Control-Allow-Origin: "'*'"
                requestTemplates:
                  application/json: "{\"statusCode\": 200}"
                passthroughBehavior: "when_no_match"
                type: "mock"
          /quests/{quest-id}/teams:
            get:
              consumes:
              - "application.json"
              produces:
              - "application/json"
              parameters:
              - name: "quest-id"
                in: "path"
                required: true
                type: "string"
              responses:
                "200":
                  description: "200 response"
                  headers:
                    Access-Control-Allow-Origin:
                      type: "string"
                "400":
                  description: "400 response"
                  headers:
                    Access-Control-Allow-Origin:
                      type: "string"
                "404":
                  description: "404 response"
                  headers:
                    Access-Control-Allow-Origin:
                      type: "string"
                "500":
                  description: "500 response"
                  headers:
                    Access-Control-Allow-Origin:
                      type: "string"
              security:
              - ApiAuthorizer: []
              x-amazon-apigateway-integration:
                credentials: !GetAtt IamRoleApiGateway.Arn
                uri: !Join
                - ''
                - - 'arn:aws:apigateway:'
                  - !Ref AWS::Region
                  - ':lambda:path/2015-03-31/functions/'
                  - !GetAtt LambdaGetStatesForQuest.Arn
                  - '/invocations'
                responses:
                  default:
                    statusCode: "200"
                    responseParameters:
                      method.response.header.Access-Control-Allow-Origin: "'*'"
                  ".*\"errorType\"\\s*:\\s*\"BadRequest\".*":
                    statusCode: "400"
                    responseTemplates:
                      application/json: "#set ($errorMessageObj = $util.parseJson($input.path('$.errorMessage')))\r\
                        \n{\r\n  \"error\" : \"$errorMessageObj.message\"\r\n}"
                  ".*\"errorType\"\\s*:\\s*\"NotFound\".*":
                    statusCode: "404"
                    responseTemplates:
                      application/json: "#set ($errorMessageObj = $util.parseJson($input.path('$.errorMessage')))\r\
                        \n{\r\n  \"error\" : \"$errorMessageObj.message\"\r\n}"
                  ".*\"errorType\"\\s*:\\s*\"InternalServerError\".*":
                    statusCode: "500"
                    responseTemplates:
                      application/json: "#set ($errorMessageObj = $util.parseJson($input.path('$.errorMessage')))\r\
                        \n{\r\n  \"error\" : \"$errorMessageObj.message\"\r\n}"
                requestTemplates:
                  application/json: "{\"quest-id\": \"$input.params('quest-id')\"}"
                passthroughBehavior: "when_no_match"
                httpMethod: "POST"
                type: "aws"
            options:
              consumes:
              - "application/json"
              produces:
              - "application/json"
              responses:
                "200":
                  description: "200 response"
                  schema:
                    $ref: "#/definitions/Empty"
                  headers:
                    Access-Control-Allow-Origin:
                      type: "string"
                    Access-Control-Allow-Methods:
                      type: "string"
                    Access-Control-Allow-Headers:
                      type: "string"
              security:
              - ApiAuthorizer: []
              x-amazon-apigateway-integration:
                responses:
                  default:
                    statusCode: "200"
                    responseParameters:
                      method.response.header.Access-Control-Allow-Methods: "'GET,OPTIONS'"
                      method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
                      method.response.header.Access-Control-Allow-Origin: "'*'"
                requestTemplates:
                  application/json: "{\"statusCode\": 200}"
                passthroughBehavior: "when_no_match"
                type: "mock"
          /teams:
            get:
              consumes:
              - "application.json"
              produces:
              - "application/json"
              responses:
                "200":
                  description: "200 response"
                  headers:
                    Access-Control-Allow-Origin:
                      type: "string"
                "400":
                  description: "400 response"
                  headers:
                    Access-Control-Allow-Origin:
                      type: "string"
                "404":
                  description: "404 response"
                  headers:
                    Access-Control-Allow-Origin:
                      type: "string"
                "500":
                  description: "500 response"
                  headers:
                    Access-Control-Allow-Origin:
                      type: "string"
              security:
              - ApiAuthorizer: []
              x-amazon-apigateway-integration:
                credentials: !GetAtt IamRoleApiGateway.Arn
                uri: !Join
                - ''
                - - 'arn:aws:apigateway:'
                  - !Ref AWS::Region
                  - ':lambda:path/2015-03-31/functions/'
                  - !GetAtt LambdaGetAllTeams.Arn
                  - '/invocations'
                responses:
                  default:
                    statusCode: "200"
                    responseParameters:
                      method.response.header.Access-Control-Allow-Origin: "'*'"
                  ".*\"errorType\"\\s*:\\s*\"BadRequest\".*":
                    statusCode: "400"
                    responseTemplates:
                      application/json: "#set ($errorMessageObj = $util.parseJson($input.path('$.errorMessage')))\r\
                        \n{\r\n  \"error\" : \"$errorMessageObj.message\"\r\n}"
                  ".*\"errorType\"\\s*:\\s*\"NotFound\".*":
                    statusCode: "404"
                    responseTemplates:
                      application/json: "#set ($errorMessageObj = $util.parseJson($input.path('$.errorMessage')))\r\
                        \n{\r\n  \"error\" : \"$errorMessageObj.message\"\r\n}"
                  ".*\"errorType\"\\s*:\\s*\"InternalServerError\".*":
                    statusCode: "500"
                    responseTemplates:
                      application/json: "#set ($errorMessageObj = $util.parseJson($input.path('$.errorMessage')))\r\
                        \n{\r\n  \"error\" : \"$errorMessageObj.message\"\r\n}"
                requestTemplates:
                  application/json: "$input.json(\"$.body\")"
                passthroughBehavior: "when_no_match"
                httpMethod: "POST"
                type: "aws"
            options:
              consumes:
              - "application/json"
              produces:
              - "application/json"
              responses:
                "200":
                  description: "200 response"
                  schema:
                    $ref: "#/definitions/Empty"
                  headers:
                    Access-Control-Allow-Origin:
                      type: "string"
                    Access-Control-Allow-Methods:
                      type: "string"
                    Access-Control-Allow-Headers:
                      type: "string"
              security:
              - ApiAuthorizer: []
              x-amazon-apigateway-integration:
                responses:
                  default:
                    statusCode: "200"
                    responseParameters:
                      method.response.header.Access-Control-Allow-Methods: "'GET,OPTIONS'"
                      method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
                      method.response.header.Access-Control-Allow-Origin: "'*'"
                requestTemplates:
                  application/json: "{\"statusCode\": 200}"
                passthroughBehavior: "when_no_match"
                type: "mock"
          /teams/{team-id}:
            get:
              consumes:
              - "application.json"
              produces:
              - "application/json"
              parameters:
              - name: "team-id"
                in: "path"
                required: true
                type: "string"
              responses:
                "200":
                  description: "200 response"
                  headers:
                    Access-Control-Allow-Origin:
                      type: "string"
                "400":
                  description: "400 response"
                  headers:
                    Access-Control-Allow-Origin:
                      type: "string"
                "404":
                  description: "404 response"
                  headers:
                    Access-Control-Allow-Origin:
                      type: "string"
                "500":
                  description: "500 response"
                  headers:
                    Access-Control-Allow-Origin:
                      type: "string"
              security:
              - ApiAuthorizer: []
              x-amazon-apigateway-integration:
                credentials: !GetAtt IamRoleApiGateway.Arn
                uri: !Join
                - ''
                - - 'arn:aws:apigateway:'
                  - !Ref AWS::Region
                  - ':lambda:path/2015-03-31/functions/'
                  - !GetAtt LambdaGetOneTeam.Arn
                  - '/invocations'
                responses:
                  default:
                    statusCode: "200"
                    responseParameters:
                      method.response.header.Access-Control-Allow-Origin: "'*'"
                  ".*\"errorType\"\\s*:\\s*\"BadRequest\".*":
                    statusCode: "400"
                    responseTemplates:
                      application/json: "#set ($errorMessageObj = $util.parseJson($input.path('$.errorMessage')))\r\
                        \n{\r\n  \"error\" : \"$errorMessageObj.message\"\r\n}"
                  ".*\"errorType\"\\s*:\\s*\"NotFound\".*":
                    statusCode: "404"
                    responseTemplates:
                      application/json: "#set ($errorMessageObj = $util.parseJson($input.path('$.errorMessage')))\r\
                        \n{\r\n  \"error\" : \"$errorMessageObj.message\"\r\n}"
                  ".*\"errorType\"\\s*:\\s*\"InternalServerError\".*":
                    statusCode: "500"
                    responseTemplates:
                      application/json: "#set ($errorMessageObj = $util.parseJson($input.path('$.errorMessage')))\r\
                        \n{\r\n  \"error\" : \"$errorMessageObj.message\"\r\n}"
                requestTemplates:
                  application/json: "{\"team-id\": \"$input.params('team-id')\"}"
                passthroughBehavior: "when_no_match"
                httpMethod: "POST"
                type: "aws"
            options:
              consumes:
              - "application/json"
              produces:
              - "application/json"
              responses:
                "200":
                  description: "200 response"
                  schema:
                    $ref: "#/definitions/Empty"
                  headers:
                    Access-Control-Allow-Origin:
                      type: "string"
                    Access-Control-Allow-Methods:
                      type: "string"
                    Access-Control-Allow-Headers:
                      type: "string"
              security:
              - ApiAuthorizer: []
              x-amazon-apigateway-integration:
                responses:
                  default:
                    statusCode: "200"
                    responseParameters:
                      method.response.header.Access-Control-Allow-Methods: "'GET,OPTIONS'"
                      method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
                      method.response.header.Access-Control-Allow-Origin: "'*'"
                requestTemplates:
                  application/json: "{\"statusCode\": 200}"
                passthroughBehavior: "when_no_match"
                type: "mock"
          /teams/{team-id}/hints/{quest-id}:
            get:
              consumes:
              - "application.json"
              produces:
              - "application/json"
              parameters:
              - name: "team-id"
                in: "path"
                required: true
                type: "string"
              - name: "quest-id"
                in: "path"
                required: true
                type: "string"
              responses:
                "200":
                  description: "200 response"
                  headers:
                    Access-Control-Allow-Origin:
                      type: "string"
                "400":
                  description: "400 response"
                  headers:
                    Access-Control-Allow-Origin:
                      type: "string"
                "404":
                  description: "404 response"
                  headers:
                    Access-Control-Allow-Origin:
                      type: "string"
                "500":
                  description: "500 response"
                  headers:
                    Access-Control-Allow-Origin:
                      type: "string"
              security:
              - ApiAuthorizer: []
              x-amazon-apigateway-integration:
                credentials: !GetAtt IamRoleApiGateway.Arn
                uri: !Join
                - ''
                - - 'arn:aws:apigateway:'
                  - !Ref AWS::Region
                  - ':lambda:path/2015-03-31/functions/'
                  - !GetAtt LambdaGetVisibleHintStatesForTeam.Arn
                  - '/invocations'
                responses:
                  default:
                    statusCode: "200"
                    responseParameters:
                      method.response.header.Access-Control-Allow-Origin: "'*'"
                  ".*\"errorType\"\\s*:\\s*\"BadRequest\".*":
                    statusCode: "400"
                    responseTemplates:
                      application/json: "#set ($errorMessageObj = $util.parseJson($input.path('$.errorMessage')))\r\
                        \n{\r\n  \"error\" : \"$errorMessageObj.message\"\r\n}"
                  ".*\"errorType\"\\s*:\\s*\"NotFound\".*":
                    statusCode: "404"
                    responseTemplates:
                      application/json: "#set ($errorMessageObj = $util.parseJson($input.path('$.errorMessage')))\r\
                        \n{\r\n  \"error\" : \"$errorMessageObj.message\"\r\n}"
                  ".*\"errorType\"\\s*:\\s*\"InternalServerError\".*":
                    statusCode: "500"
                    responseTemplates:
                      application/json: "#set ($errorMessageObj = $util.parseJson($input.path('$.errorMessage')))\r\
                        \n{\r\n  \"error\" : \"$errorMessageObj.message\"\r\n}"
                requestTemplates:
                  application/json: "{\"team-id\": \"$input.params('team-id')\", \"quest-id\": \"$input.params('quest-id')\"}"
                passthroughBehavior: "when_no_match"
                httpMethod: "POST"
                type: "aws"
            options:
              consumes:
              - "application/json"
              produces:
              - "application/json"
              responses:
                "200":
                  description: "200 response"
                  schema:
                    $ref: "#/definitions/Empty"
                  headers:
                    Access-Control-Allow-Origin:
                      type: "string"
                    Access-Control-Allow-Methods:
                      type: "string"
                    Access-Control-Allow-Headers:
                      type: "string"
              security:
              - ApiAuthorizer: []
              x-amazon-apigateway-integration:
                responses:
                  default:
                    statusCode: "200"
                    responseParameters:
                      method.response.header.Access-Control-Allow-Methods: "'GET,OPTIONS'"
                      method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
                      method.response.header.Access-Control-Allow-Origin: "'*'"
                requestTemplates:
                  application/json: "{\"statusCode\": 200}"
                passthroughBehavior: "when_no_match"
                type: "mock"
          /teams/{team-id}/hints/{quest-id}/{key}:
            get:
              consumes:
              - "application.json"
              produces:
              - "application/json"
              parameters:
              - name: "team-id"
                in: "path"
                required: true
                type: "string"
              - name: "quest-id"
                in: "path"
                required: true
                type: "string"
              - name: "key"
                in: "path"
                required: true
                type: "string"
              responses:
                "200":
                  description: "200 response"
                  headers:
                    Access-Control-Allow-Origin:
                      type: "string"
                "400":
                  description: "400 response"
                  headers:
                    Access-Control-Allow-Origin:
                      type: "string"
                "404":
                  description: "404 response"
                  headers:
                    Access-Control-Allow-Origin:
                      type: "string"
                "500":
                  description: "500 response"
                  headers:
                    Access-Control-Allow-Origin:
                      type: "string"
              security:
              - ApiAuthorizer: []
              x-amazon-apigateway-integration:
                credentials: !GetAtt IamRoleApiGateway.Arn
                uri: !Join
                - ''
                - - 'arn:aws:apigateway:'
                  - !Ref AWS::Region
                  - ':lambda:path/2015-03-31/functions/'
                  - !GetAtt LambdaGetHintStateForTeam.Arn
                  - '/invocations'
                responses:
                  default:
                    statusCode: "200"
                    responseParameters:
                      method.response.header.Access-Control-Allow-Origin: "'*'"
                  ".*\"errorType\"\\s*:\\s*\"BadRequest\".*":
                    statusCode: "400"
                    responseTemplates:
                      application/json: "#set ($errorMessageObj = $util.parseJson($input.path('$.errorMessage')))\r\
                        \n{\r\n  \"error\" : \"$errorMessageObj.message\"\r\n}"
                  ".*\"errorType\"\\s*:\\s*\"NotFound\".*":
                    statusCode: "404"
                    responseTemplates:
                      application/json: "#set ($errorMessageObj = $util.parseJson($input.path('$.errorMessage')))\r\
                        \n{\r\n  \"error\" : \"$errorMessageObj.message\"\r\n}"
                  ".*\"errorType\"\\s*:\\s*\"InternalServerError\".*":
                    statusCode: "500"
                    responseTemplates:
                      application/json: "#set ($errorMessageObj = $util.parseJson($input.path('$.errorMessage')))\r\
                        \n{\r\n  \"error\" : \"$errorMessageObj.message\"\r\n}"
                requestTemplates:
                  application/json: "{\"team-id\": \"$input.params('team-id')\", \"quest-id\": \"$input.params('quest-id')\", \"key\": \"$input.params('key')\"}"
                passthroughBehavior: "when_no_match"
                httpMethod: "POST"
                type: "aws"
            patch:
              consumes:
              - "application.json"
              produces:
              - "application/json"
              parameters:
              - name: "team-id"
                in: "path"
                required: true
                type: "string"
              - name: "quest-id"
                in: "path"
                required: true
                type: "string"
              - name: "key"
                in: "path"
                required: true
                type: "string"
              responses:
                "200":
                  description: "200 response"
                  headers:
                    Access-Control-Allow-Origin:
                      type: "string"
                "400":
                  description: "400 response"
                  headers:
                    Access-Control-Allow-Origin:
                      type: "string"
                "404":
                  description: "404 response"
                  headers:
                    Access-Control-Allow-Origin:
                      type: "string"
                "500":
                  description: "500 response"
                  headers:
                    Access-Control-Allow-Origin:
                      type: "string"
              security:
              - ApiAuthorizer: []
              x-amazon-apigateway-integration:
                credentials: !GetAtt IamRoleApiGateway.Arn
                uri: !Join
                - ''
                - - 'arn:aws:apigateway:'
                  - !Ref AWS::Region
                  - ':lambda:path/2015-03-31/functions/'
                  - !GetAtt LambdaPostHintForQuest.Arn
                  - '/invocations'
                requestParameters:
                  integration.request.path.team-id: "method.request.path.team-id"
                  integration.request.path.quest-id: "method.request.path.quest-id"
                  integration.request.path.key: "method.request.path.key"
                requestTemplates:
                  application/json: "{\"team-id\": \"$input.params('team-id')\", \"quest-id\": \"$input.params('quest-id')\", \"key\": $input.params('key'), \"status\": $input.json('$.status'), \"enable-time\": $input.json('$.enable-time'), \"disable-time\": $input.json('$.disable-time')}"
                responses:
                  default:
                    statusCode: "200"
                    responseParameters:
                      method.response.header.Access-Control-Allow-Origin: "'*'"
                  ".*\"errorType\"\\s*:\\s*\"BadRequest\".*":
                    statusCode: "400"
                    responseTemplates:
                      application/json: "#set ($errorMessageObj = $util.parseJson($input.path('$.errorMessage')))\r\
                        \n{\r\n  \"error\" : \"$errorMessageObj.message\"\r\n}"
                  ".*\"errorType\"\\s*:\\s*\"NotFound\".*":
                    statusCode: "404"
                    responseTemplates:
                      application/json: "#set ($errorMessageObj = $util.parseJson($input.path('$.errorMessage')))\r\
                        \n{\r\n  \"error\" : \"$errorMessageObj.message\"\r\n}"
                  ".*\"errorType\"\\s*:\\s*\"InternalServerError\".*":
                    statusCode: "500"
                    responseTemplates:
                      application/json: "#set ($errorMessageObj = $util.parseJson($input.path('$.errorMessage')))\r\
                        \n{\r\n  \"error\" : \"$errorMessageObj.message\"\r\n}"
                passthroughBehavior: "when_no_match"
                httpMethod: "POST"
                type: "aws"
            options:
              consumes:
              - "application/json"
              produces:
              - "application/json"
              responses:
                "200":
                  description: "200 response"
                  schema:
                    $ref: "#/definitions/Empty"
                  headers:
                    Access-Control-Allow-Origin:
                      type: "string"
                    Access-Control-Allow-Methods:
                      type: "string"
                    Access-Control-Allow-Headers:
                      type: "string"
              security:
              - ApiAuthorizer: []
              x-amazon-apigateway-integration:
                responses:
                  default:
                    statusCode: "200"
                    responseParameters:
                      method.response.header.Access-Control-Allow-Methods: "'GET,PATCH,OPTIONS'"
                      method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
                      method.response.header.Access-Control-Allow-Origin: "'*'"
                requestTemplates:
                  application/json: "{\"statusCode\": 200}"
                passthroughBehavior: "when_no_match"
                type: "mock"
          /teams/{team-id}/quests:
            get:
              consumes:
              - "application.json"
              produces:
              - "application/json"
              parameters:
              - name: "team-id"
                in: "path"
                required: true
                type: "string"
              responses:
                "200":
                  description: "200 response"
                  headers:
                    Access-Control-Allow-Origin:
                      type: "string"
                "400":
                  description: "400 response"
                  headers:
                    Access-Control-Allow-Origin:
                      type: "string"
                "404":
                  description: "404 response"
                  headers:
                    Access-Control-Allow-Origin:
                      type: "string"
                "500":
                  description: "500 response"
                  headers:
                    Access-Control-Allow-Origin:
                      type: "string"
              security:
              - ApiAuthorizer: []
              x-amazon-apigateway-integration:
                credentials: !GetAtt IamRoleApiGateway.Arn
                uri: !Join
                - ''
                - - 'arn:aws:apigateway:'
                  - !Ref AWS::Region
                  - ':lambda:path/2015-03-31/functions/'
                  - !GetAtt LambdaGetStatesForTeam.Arn
                  - '/invocations'
                responses:
                  default:
                    statusCode: "200"
                    responseParameters:
                      method.response.header.Access-Control-Allow-Origin: "'*'"
                  ".*\"errorType\"\\s*:\\s*\"BadRequest\".*":
                    statusCode: "400"
                    responseTemplates:
                      application/json: "#set ($errorMessageObj = $util.parseJson($input.path('$.errorMessage')))\r\
                        \n{\r\n  \"error\" : \"$errorMessageObj.message\"\r\n}"
                  ".*\"errorType\"\\s*:\\s*\"NotFound\".*":
                    statusCode: "404"
                    responseTemplates:
                      application/json: "#set ($errorMessageObj = $util.parseJson($input.path('$.errorMessage')))\r\
                        \n{\r\n  \"error\" : \"$errorMessageObj.message\"\r\n}"
                  ".*\"errorType\"\\s*:\\s*\"InternalServerError\".*":
                    statusCode: "500"
                    responseTemplates:
                      application/json: "#set ($errorMessageObj = $util.parseJson($input.path('$.errorMessage')))\r\
                        \n{\r\n  \"error\" : \"$errorMessageObj.message\"\r\n}"
                requestTemplates:
                  application/json: "{\"team-id\": \"$input.params('team-id')\"}"
                passthroughBehavior: "when_no_match"
                httpMethod: "POST"
                type: "aws"
            options:
              consumes:
              - "application/json"
              produces:
              - "application/json"
              responses:
                "200":
                  description: "200 response"
                  schema:
                    $ref: "#/definitions/Empty"
                  headers:
                    Access-Control-Allow-Origin:
                      type: "string"
                    Access-Control-Allow-Methods:
                      type: "string"
                    Access-Control-Allow-Headers:
                      type: "string"
              security:
              - ApiAuthorizer: []
              x-amazon-apigateway-integration:
                responses:
                  default:
                    statusCode: "200"
                    responseParameters:
                      method.response.header.Access-Control-Allow-Methods: "'GET,OPTIONS'"
                      method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
                      method.response.header.Access-Control-Allow-Origin: "'*'"
                requestTemplates:
                  application/json: "{\"statusCode\": 200}"
                passthroughBehavior: "when_no_match"
                type: "mock"
          /teams/{team-id}/complete/{quest-id}:
            post:
              consumes:
              - "application.json"
              produces:
              - "application/json"
              parameters:
              - name: "team-id"
                in: "path"
                required: true
                type: "string"
              - name: "quest-id"
                in: "path"
                required: true
                type: "string"
              responses:
                "200":
                  description: "200 response"
                  headers:
                    Access-Control-Allow-Origin:
                      type: "string"
                "400":
                  description: "400 response"
                  headers:
                    Access-Control-Allow-Origin:
                      type: "string"
                "404":
                  description: "404 response"
                  headers:
                    Access-Control-Allow-Origin:
                      type: "string"
                "500":
                  description: "500 response"
                  headers:
                    Access-Control-Allow-Origin:
                      type: "string"
              security:
              - ApiAuthorizer: []
              x-amazon-apigateway-integration:
                credentials: !GetAtt IamRoleApiGateway.Arn
                uri: !Join
                - ''
                - - 'arn:aws:apigateway:'
                  - !Ref AWS::Region
                  - ':lambda:path/2015-03-31/functions/'
                  - !GetAtt LambdaPostQuestComplete.Arn
                  - '/invocations'
                requestParameters:
                  integration.request.path.team-id: "method.request.path.team-id"
                  integration.request.path.quest-id: "method.request.path.quest-id"
                requestTemplates:
                  application/json: "{\"team-id\": \"$input.params('team-id')\", \"quest-id\": \"$input.params('quest-id')\", \"score-weighting\": $input.json('$.score-weighting')}"
                responses:
                  default:
                    statusCode: "200"
                    responseParameters:
                      method.response.header.Access-Control-Allow-Origin: "'*'"
                  ".*\"errorType\"\\s*:\\s*\"BadRequest\".*":
                    statusCode: "400"
                    responseTemplates:
                      application/json: "#set ($errorMessageObj = $util.parseJson($input.path('$.errorMessage')))\r\
                        \n{\r\n  \"error\" : \"$errorMessageObj.message\"\r\n}"
                  ".*\"errorType\"\\s*:\\s*\"NotFound\".*":
                    statusCode: "404"
                    responseTemplates:
                      application/json: "#set ($errorMessageObj = $util.parseJson($input.path('$.errorMessage')))\r\
                        \n{\r\n  \"error\" : \"$errorMessageObj.message\"\r\n}"
                  ".*\"errorType\"\\s*:\\s*\"InternalServerError\".*":
                    statusCode: "500"
                    responseTemplates:
                      application/json: "#set ($errorMessageObj = $util.parseJson($input.path('$.errorMessage')))\r\
                        \n{\r\n  \"error\" : \"$errorMessageObj.message\"\r\n}"
                passthroughBehavior: "when_no_match"
                httpMethod: "POST"
                type: "aws"
            options:
              consumes:
              - "application/json"
              produces:
              - "application/json"
              responses:
                "200":
                  description: "200 response"
                  schema:
                    $ref: "#/definitions/Empty"
                  headers:
                    Access-Control-Allow-Origin:
                      type: "string"
                    Access-Control-Allow-Methods:
                      type: "string"
                    Access-Control-Allow-Headers:
                      type: "string"
              security:
              - ApiAuthorizer: []
              x-amazon-apigateway-integration:
                responses:
                  default:
                    statusCode: "200"
                    responseParameters:
                      method.response.header.Access-Control-Allow-Methods: "'POST,OPTIONS'"
                      method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
                      method.response.header.Access-Control-Allow-Origin: "'*'"
                requestTemplates:
                  application/json: "{\"statusCode\": 200}"
                passthroughBehavior: "when_no_match"
                type: "mock"
          /teams/{team-id}/score/{quest-id}:
            post:
              consumes:
              - "application.json"
              produces:
              - "application/json"
              parameters:
              - name: "team-id"
                in: "path"
                required: true
                type: "string"
              - name: "quest-id"
                in: "path"
                required: true
                type: "string"
              responses:
                "200":
                  description: "200 response"
                  headers:
                    Access-Control-Allow-Origin:
                      type: "string"
                "400":
                  description: "400 response"
                  headers:
                    Access-Control-Allow-Origin:
                      type: "string"
                "404":
                  description: "404 response"
                  headers:
                    Access-Control-Allow-Origin:
                      type: "string"
                "500":
                  description: "500 response"
                  headers:
                    Access-Control-Allow-Origin:
                      type: "string"
              security:
              - ApiAuthorizer: []
              x-amazon-apigateway-integration:
                credentials: !GetAtt IamRoleApiGateway.Arn
                uri: !Join
                - ''
                - - 'arn:aws:apigateway:'
                  - !Ref AWS::Region
                  - ':lambda:path/2015-03-31/functions/'
                  - !GetAtt LambdaPostQuestScore.Arn
                  - '/invocations'
                requestParameters:
                  integration.request.path.team-id: "method.request.path.team-id"
                  integration.request.path.quest-id: "method.request.path.quest-id"
                requestTemplates:
                  application/json: "{\"team-id\": \"$input.params('team-id')\", \"quest-id\": \"$input.params('quest-id')\", \"score-weighting\": $input.json('$.score-weighting')}"
                responses:
                  default:
                    statusCode: "200"
                    responseParameters:
                      method.response.header.Access-Control-Allow-Origin: "'*'"
                  ".*\"errorType\"\\s*:\\s*\"BadRequest\".*":
                    statusCode: "400"
                    responseTemplates:
                      application/json: "#set ($errorMessageObj = $util.parseJson($input.path('$.errorMessage')))\r\
                        \n{\r\n  \"error\" : \"$errorMessageObj.message\"\r\n}"
                  ".*\"errorType\"\\s*:\\s*\"NotFound\".*":
                    statusCode: "404"
                    responseTemplates:
                      application/json: "#set ($errorMessageObj = $util.parseJson($input.path('$.errorMessage')))\r\
                        \n{\r\n  \"error\" : \"$errorMessageObj.message\"\r\n}"
                  ".*\"errorType\"\\s*:\\s*\"InternalServerError\".*":
                    statusCode: "500"
                    responseTemplates:
                      application/json: "#set ($errorMessageObj = $util.parseJson($input.path('$.errorMessage')))\r\
                        \n{\r\n  \"error\" : \"$errorMessageObj.message\"\r\n}"
                passthroughBehavior: "when_no_match"
                httpMethod: "POST"
                type: "aws"
            options:
              consumes:
              - "application/json"
              produces:
              - "application/json"
              responses:
                "200":
                  description: "200 response"
                  schema:
                    $ref: "#/definitions/Empty"
                  headers:
                    Access-Control-Allow-Origin:
                      type: "string"
                    Access-Control-Allow-Methods:
                      type: "string"
                    Access-Control-Allow-Headers:
                      type: "string"
              security:
              - ApiAuthorizer: []
              x-amazon-apigateway-integration:
                responses:
                  default:
                    statusCode: "200"
                    responseParameters:
                      method.response.header.Access-Control-Allow-Methods: "'POST,OPTIONS'"
                      method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
                      method.response.header.Access-Control-Allow-Origin: "'*'"
                requestTemplates:
                  application/json: "{\"statusCode\": 200}"
                passthroughBehavior: "when_no_match"
                type: "mock"
          /teams/{team-id}/start/{quest-id}:
            post:
              consumes:
              - "application.json"
              produces:
              - "application/json"
              parameters:
              - name: "team-id"
                in: "path"
                required: true
                type: "string"
              - name: "quest-id"
                in: "path"
                required: true
                type: "string"
              responses:
                "200":
                  description: "200 response"
                  headers:
                    Access-Control-Allow-Origin:
                      type: "string"
                "400":
                  description: "400 response"
                  headers:
                    Access-Control-Allow-Origin:
                      type: "string"
                "404":
                  description: "404 response"
                  headers:
                    Access-Control-Allow-Origin:
                      type: "string"
                "500":
                  description: "500 response"
                  headers:
                    Access-Control-Allow-Origin:
                      type: "string"
              security:
              - ApiAuthorizer: []
              x-amazon-apigateway-integration:
                credentials: !GetAtt IamRoleApiGateway.Arn
                uri: !Join
                - ''
                - - 'arn:aws:apigateway:'
                  - !Ref AWS::Region
                  - ':lambda:path/2015-03-31/functions/'
                  - !GetAtt LambdaPostQuestStart.Arn
                  - '/invocations'
                requestParameters:
                  integration.request.path.team-id: "method.request.path.team-id"
                  integration.request.path.quest-id: "method.request.path.quest-id"
                requestTemplates:
                  application/json: "{\"team-id\": \"$input.params('team-id')\", \"quest-id\": \"$input.params('quest-id')\", \"deploy\": $input.json('$.deploy')}"
                responses:
                  default:
                    statusCode: "200"
                    responseParameters:
                      method.response.header.Access-Control-Allow-Origin: "'*'"
                  ".*\"errorType\"\\s*:\\s*\"BadRequest\".*":
                    statusCode: "400"
                    responseTemplates:
                      application/json: "#set ($errorMessageObj = $util.parseJson($input.path('$.errorMessage')))\r\
                        \n{\r\n  \"error\" : \"$errorMessageObj.message\"\r\n}"
                  ".*\"errorType\"\\s*:\\s*\"NotFound\".*":
                    statusCode: "404"
                    responseTemplates:
                      application/json: "#set ($errorMessageObj = $util.parseJson($input.path('$.errorMessage')))\r\
                        \n{\r\n  \"error\" : \"$errorMessageObj.message\"\r\n}"
                  ".*\"errorType\"\\s*:\\s*\"InternalServerError\".*":
                    statusCode: "500"
                    responseTemplates:
                      application/json: "#set ($errorMessageObj = $util.parseJson($input.path('$.errorMessage')))\r\
                        \n{\r\n  \"error\" : \"$errorMessageObj.message\"\r\n}"
                passthroughBehavior: "when_no_match"
                httpMethod: "POST"
                type: "aws"
            options:
              consumes:
              - "application/json"
              produces:
              - "application/json"
              responses:
                "200":
                  description: "200 response"
                  schema:
                    $ref: "#/definitions/Empty"
                  headers:
                    Access-Control-Allow-Origin:
                      type: "string"
                    Access-Control-Allow-Methods:
                      type: "string"
                    Access-Control-Allow-Headers:
                      type: "string"
              security:
              - ApiAuthorizer: []
              x-amazon-apigateway-integration:
                responses:
                  default:
                    statusCode: "200"
                    responseParameters:
                      method.response.header.Access-Control-Allow-Methods: "'POST,OPTIONS'"
                      method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
                      method.response.header.Access-Control-Allow-Origin: "'*'"
                requestTemplates:
                  application/json: "{\"statusCode\": 200}"
                passthroughBehavior: "when_no_match"
                type: "mock"
        securityDefinitions:
          ApiAuthorizer:
            type: "apiKey"
            name: "Authorization"
            in: "header"
            x-amazon-apigateway-authtype: "custom"
            x-amazon-apigateway-authorizer:
              authorizerUri: !Join
              - ''
              - - 'arn:aws:apigateway:'
                - !Ref AWS::Region
                - ':lambda:path/2015-03-31/functions/'
                - !GetAtt LambdaApiAuthorizer.Arn
                - '/invocations'
              authorizerCredentials: !GetAtt IamRoleApiGateway.Arn
              authorizerResultTtlInSeconds: 60
              type: "token"            
        definitions:
          Empty:
            type: "object"
            title: "Empty Schema"

  # ╔══════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════╗
  # ║ CloudWatch Resources                                                                                                                                     ║
  # ╠═══════════════════════════════╤═════════════════════════════╤════════════════════════════════════════════════════════════════════════════════════════════╣
  # ║ Dashboard                     │ AWS::CloudWatch::Dashboard  │ Monitoring Dashboard for the Quests API                                                    ║
  # ╚═══════════════════════════════╧═════════════════════════════╧════════════════════════════════════════════════════════════════════════════════════════════╝

  DashboardAPI:
    Type: AWS::CloudWatch::Dashboard
    Properties:
      DashboardName: QuestsAPI
      DashboardBody: !Sub |
        {
          "widgets": [
            {
              "type": "text",
              "x": 0,
              "y": 0,
              "width": 24,
              "height": 2,
              "properties": {
                "markdown": "\n# Quests API Gateway\n"
              }
            },
            {
              "type": "metric",
              "x": 0,
              "y": 2,
              "width": 12,
              "height": 6,
              "properties": {
                "metrics": [
                  [ "AWS/ApiGateway", "Latency", "ApiName", "gdQuests-api" ],
                  [ ".", "IntegrationLatency", ".", "." ]
                ],
                "view": "timeSeries",
                "stacked": false,
                "region": "${AWS::Region}",
                "title": "API Gateway Latency",
                "annotations": {
                  "horizontal": [
                    {
                      "label": "Target",
                      "value": 500
                    }
                  ]
                },
                "stat": "Average",
                "period": 60,
                "yAxis": {
                  "left": {
                    "showUnits": true,
                    "min": 0
                  }
                }
              }
            },
            {
              "type": "metric",
              "x": 12,
              "y": 2,
              "width": 12,
              "height": 6,
              "properties": {
                "metrics": [
                  [ "AWS/ApiGateway", "Count", "ApiName", "gdQuests-api", { "color": "#2ca02c" } ],
                  [ ".", "4XXError", ".", ".", { "color": "#d62728" } ],
                  [ ".", "5XXError", ".", ".", { "color": "#9467bd" } ]
                ],
                "view": "timeSeries",
                "stacked": false,
                "region": "${AWS::Region}",
                "title": "API Gateway Request Count",
                "stat": "Sum",
                "period": 60
              }
            },
            {
              "type": "text",
              "x": 0,
              "y": 8,
              "width": 24,
              "height": 2,
              "properties": {
                "markdown": "\n# DynamoDB Tables\n"
              }
            },
            {
              "type": "metric",
              "x": 0,
              "y": 10,
              "width": 8,
              "height": 6,
              "properties": {
                "metrics": [
                  [ "AWS/DynamoDB", "ConsumedReadCapacityUnits", "TableName", "${DynamoDbOutputsTable}", { "color": "#2ca02c" } ],
                  [ ".", "ConsumedWriteCapacityUnits", ".", ".", { "color": "#d62728" } ]
                ],
                "view": "timeSeries",
                "stacked": false,
                "region": "${AWS::Region}",
                "stat": "Average",
                "period": 60,
                "title": "${DynamoDbOutputsTable} RCU/WCU"
              }
            },
            {
              "type": "metric",
              "x": 8,
              "y": 10,
              "width": 8,
              "height": 6,
              "properties": {
                "metrics": [
                  [ "AWS/DynamoDB", "ConsumedReadCapacityUnits", "TableName", "${DynamoDbQuestsTable}", { "color": "#2ca02c" } ],
                  [ ".", "ConsumedWriteCapacityUnits", ".", ".", { "color": "#d62728" } ]
                ],
                "view": "timeSeries",
                "stacked": false,
                "region": "${AWS::Region}",
                "stat": "Average",
                "period": 60,
                "title": "${DynamoDbQuestsTable} RCU/WCU"
              }
            },
            {
              "type": "metric",
              "x": 16,
              "y": 10,
              "width": 8,
              "height": 6,
              "properties": {
                "metrics": [
                  [ "AWS/DynamoDB", "ConsumedReadCapacityUnits", "TableName", "${DynamoDbQuestStatesTable}", { "color": "#2ca02c" } ],
                  [ ".", "ConsumedWriteCapacityUnits", ".", ".", { "color": "#d62728" } ]
                ],
                "view": "timeSeries",
                "stacked": false,
                "region": "${AWS::Region}",
                "stat": "Average",
                "period": 60,
                "title": "${DynamoDbQuestStatesTable} RCU/WCU"
              }
            },
            {
              "type": "text",
              "x": 0,
              "y": 16,
              "width": 24,
              "height": 2,
              "properties": {
                "markdown": "\n# API Authorizer\n${LambdaApiAuthorizer} Timeout: 55s"
              }
            },
            {
              "type": "metric",
              "x": 0,
              "y": 18,
              "width": 6,
              "height": 6,
              "properties": {
                "metrics": [
                  [ "AWS/Lambda", "Invocations", "FunctionName", "${LambdaApiAuthorizer}", { "color": "#2ca02c" } ],
                  [ ".", "Throttles", ".", "." ],
                  [ ".", "Errors", ".", ".", { "color": "#d62728" } ]
                ],
                "view": "timeSeries",
                "stacked": false,
                "region": "${AWS::Region}",
                "stat": "Sum",
                "period": 60,
                "title": "Lambda ${LambdaApiAuthorizer}: Counts"
              }
            },
            {
              "type": "metric",
              "x": 6,
              "y": 18,
              "width": 6,
              "height": 6,
              "properties": {
                "metrics": [
                  [ "AWS/Lambda", "Duration", "FunctionName", "${LambdaApiAuthorizer}", { "yAxis": "left", "color": "#1f77b4" } ]
                ],
                "view": "timeSeries",
                "stacked": false,
                "region": "${AWS::Region}",
                "stat": "Average",
                "period": 60,
                "title": "Lambda ${LambdaApiAuthorizer}: Duration"
              }
            },
            {
              "type": "text",
              "x": 0,
              "y": 24,
              "width": 24,
              "height": 2,
              "properties": {
                "markdown": "\n# Inputs\nAll Lambda Functions Timeout: 30s"
              }
            },
            {
              "type": "metric",
              "x": 0,
              "y": 26,
              "width": 6,
              "height": 6,
              "properties": {
                "metrics": [
                  [ "AWS/Lambda", "Invocations", "FunctionName", "${LambdaGetInput}", { "color": "#2ca02c" } ],
                  [ ".", "Throttles", ".", "." ],
                  [ ".", "Errors", ".", ".", { "color": "#d62728" } ]
                ],
                "view": "timeSeries",
                "stacked": false,
                "region": "${AWS::Region}",
                "stat": "Sum",
                "period": 60,
                "title": "Lambda ${LambdaGetInput}: Counts"
              }
            },
            {
              "type": "metric",
              "x": 6,
              "y": 26,
              "width": 6,
              "height": 6,
              "properties": {
                "metrics": [
                  [ "AWS/Lambda", "Duration", "FunctionName", "${LambdaGetInput}", { "yAxis": "left", "color": "#1f77b4" } ]
                ],
                "view": "timeSeries",
                "stacked": false,
                "region": "${AWS::Region}",
                "stat": "Average",
                "period": 60,
                "title": "Lambda ${LambdaGetInput}: Duration"
              }
            },
            {
              "type": "metric",
              "x": 12,
              "y": 26,
              "width": 6,
              "height": 6,
              "properties": {
                "metrics": [
                  [ "AWS/Lambda", "Invocations", "FunctionName", "${LambdaPostInput}", { "color": "#2ca02c" } ],
                  [ ".", "Throttles", ".", "." ],
                  [ ".", "Errors", ".", ".", { "color": "#d62728" } ]
                ],
                "view": "timeSeries",
                "stacked": false,
                "region": "${AWS::Region}",
                "stat": "Sum",
                "period": 60,
                "title": "Lambda ${LambdaPostInput}: Counts"
              }
            },
            {
              "type": "metric",
              "x": 18,
              "y": 26,
              "width": 6,
              "height": 6,
              "properties": {
                "metrics": [
                  [ "AWS/Lambda", "Duration", "FunctionName", "${LambdaPostInput}", { "yAxis": "left", "color": "#1f77b4" } ]
                ],
                "view": "timeSeries",
                "stacked": false,
                "region": "${AWS::Region}",
                "stat": "Average",
                "period": 60,
                "title": "Lambda ${LambdaPostInput}: Duration"
              }
            },
            {
              "type": "metric",
              "x": 0,
              "y": 30,
              "width": 6,
              "height": 6,
              "properties": {
                "metrics": [
                  [ "AWS/Lambda", "Invocations", "FunctionName", "${LambdaDeleteInput}", { "color": "#2ca02c" } ],
                  [ ".", "Throttles", ".", "." ],
                  [ ".", "Errors", ".", ".", { "color": "#d62728" } ]
                ],
                "view": "timeSeries",
                "stacked": false,
                "region": "${AWS::Region}",
                "stat": "Sum",
                "period": 60,
                "title": "Lambda ${LambdaDeleteInput}: Counts"
              }
            },
            {
              "type": "metric",
              "x": 6,
              "y": 30,
              "width": 6,
              "height": 6,
              "properties": {
                "metrics": [
                  [ "AWS/Lambda", "Duration", "FunctionName", "${LambdaDeleteInput}", { "yAxis": "left", "color": "#1f77b4" } ]
                ],
                "view": "timeSeries",
                "stacked": false,
                "region": "${AWS::Region}",
                "stat": "Average",
                "period": 60,
                "title": "Lambda ${LambdaDeleteInput}: Duration"
              }
            },
            {
              "type": "text",
              "x": 0,
              "y": 36,
              "width": 24,
              "height": 2,
              "properties": {
                "markdown": "\n# Outputs\nAll Lambda Functions Timeout: 30s"
              }
            },
            {
              "type": "metric",
              "x": 0,
              "y": 38,
              "width": 6,
              "height": 6,
              "properties": {
                "metrics": [
                  [ "AWS/Lambda", "Invocations", "FunctionName", "${LambdaPostOutput}", { "color": "#2ca02c" } ],
                  [ ".", "Throttles", ".", "." ],
                  [ ".", "Errors", ".", ".", { "color": "#d62728" } ]
                ],
                "view": "timeSeries",
                "stacked": false,
                "region": "${AWS::Region}",
                "stat": "Sum",
                "period": 60,
                "title": "Lambda ${LambdaPostOutput}: Counts"
              }
            },
            {
              "type": "metric",
              "x": 6,
              "y": 38,
              "width": 6,
              "height": 6,
              "properties": {
                "metrics": [
                  [ "AWS/Lambda", "Duration", "FunctionName", "${LambdaPostOutput}", { "yAxis": "left", "color": "#1f77b4" } ]
                ],
                "view": "timeSeries",
                "stacked": false,
                "region": "${AWS::Region}",
                "stat": "Average",
                "period": 60,
                "title": "Lambda ${LambdaPostOutput}: Duration"
              }
            },
            {
              "type": "metric",
              "x": 12,
              "y": 38,
              "width": 6,
              "height": 6,
              "properties": {
                "metrics": [
                  [ "AWS/Lambda", "Invocations", "FunctionName", "${LambdaDeleteOutput}", { "color": "#2ca02c" } ],
                  [ ".", "Throttles", ".", "." ],
                  [ ".", "Errors", ".", ".", { "color": "#d62728" } ]
                ],
                "view": "timeSeries",
                "stacked": false,
                "region": "${AWS::Region}",
                "stat": "Sum",
                "period": 60,
                "title": "Lambda ${LambdaDeleteOutput}: Counts"
              }
            },
            {
              "type": "metric",
              "x": 18,
              "y": 38,
              "width": 6,
              "height": 6,
              "properties": {
                "metrics": [
                  [ "AWS/Lambda", "Duration", "FunctionName", "${LambdaDeleteOutput}", { "yAxis": "left", "color": "#1f77b4" } ]
                ],
                "view": "timeSeries",
                "stacked": false,
                "region": "${AWS::Region}",
                "stat": "Average",
                "period": 60,
                "title": "Lambda ${LambdaDeleteOutput}: Duration"
              }
            },
            {
              "type": "text",
              "x": 0,
              "y": 44,
              "width": 24,
              "height": 2,
              "properties": {
                "markdown": "\n# Quests\nAll Lambda Functions Timeout: 30s"
              }
            },
            {
              "type": "metric",
              "x": 0,
              "y": 46,
              "width": 6,
              "height": 6,
              "properties": {
                "metrics": [
                  [ "AWS/Lambda", "Invocations", "FunctionName", "${LambdaGetAllQuests}", { "color": "#2ca02c" } ],
                  [ ".", "Throttles", ".", "." ],
                  [ ".", "Errors", ".", ".", { "color": "#d62728" } ]
                ],
                "view": "timeSeries",
                "stacked": false,
                "region": "${AWS::Region}",
                "stat": "Sum",
                "period": 60,
                "title": "Lambda ${LambdaGetAllQuests}: Counts"
              }
            },
            {
              "type": "metric",
              "x": 6,
              "y": 46,
              "width": 6,
              "height": 6,
              "properties": {
                "metrics": [
                  [ "AWS/Lambda", "Duration", "FunctionName", "${LambdaGetAllQuests}", { "yAxis": "left", "color": "#1f77b4" } ]
                ],
                "view": "timeSeries",
                "stacked": false,
                "region": "${AWS::Region}",
                "stat": "Average",
                "period": 60,
                "title": "Lambda ${LambdaGetAllQuests}: Duration"
              }
            },
            {
              "type": "metric",
              "x": 12,
              "y": 46,
              "width": 6,
              "height": 6,
              "properties": {
                "metrics": [
                  [ "AWS/Lambda", "Invocations", "FunctionName", "${LambdaGetOneQuest}", { "color": "#2ca02c" } ],
                  [ ".", "Throttles", ".", "." ],
                  [ ".", "Errors", ".", ".", { "color": "#d62728" } ]
                ],
                "view": "timeSeries",
                "stacked": false,
                "region": "${AWS::Region}",
                "stat": "Sum",
                "period": 60,
                "title": "Lambda ${LambdaGetOneQuest}: Counts"
              }
            },
            {
              "type": "metric",
              "x": 18,
              "y": 46,
              "width": 6,
              "height": 6,
              "properties": {
                "metrics": [
                  [ "AWS/Lambda", "Duration", "FunctionName", "${LambdaGetOneQuest}", { "yAxis": "left", "color": "#1f77b4" } ]
                ],
                "view": "timeSeries",
                "stacked": false,
                "region": "${AWS::Region}",
                "stat": "Average",
                "period": 60,
                "title": "Lambda ${LambdaGetOneQuest}: Duration"
              }
            },
            {
              "type": "metric",
              "x": 0,
              "y": 52,
              "width": 6,
              "height": 6,
              "properties": {
                "metrics": [
                  [ "AWS/Lambda", "Invocations", "FunctionName", "${LambdaPostQuestStart}", { "color": "#2ca02c" } ],
                  [ ".", "Throttles", ".", "." ],
                  [ ".", "Errors", ".", ".", { "color": "#d62728" } ]
                ],
                "view": "timeSeries",
                "stacked": false,
                "region": "${AWS::Region}",
                "stat": "Sum",
                "period": 60,
                "title": "Lambda ${LambdaPostQuestStart}: Counts"
              }
            },
            {
              "type": "metric",
              "x": 6,
              "y": 52,
              "width": 6,
              "height": 6,
              "properties": {
                "metrics": [
                  [ "AWS/Lambda", "Duration", "FunctionName", "${LambdaPostQuestStart}", { "yAxis": "left", "color": "#1f77b4" } ]
                ],
                "view": "timeSeries",
                "stacked": false,
                "region": "${AWS::Region}",
                "stat": "Average",
                "period": 60,
                "title": "Lambda ${LambdaPostQuestStart}: Duration"
              }
            },
            {
              "type": "metric",
              "x": 12,
              "y": 52,
              "width": 6,
              "height": 6,
              "properties": {
                "metrics": [
                  [ "AWS/Lambda", "Invocations", "FunctionName", "${LambdaPostQuestComplete}", { "color": "#2ca02c" } ],
                  [ ".", "Throttles", ".", "." ],
                  [ ".", "Errors", ".", ".", { "color": "#d62728" } ]
                ],
                "view": "timeSeries",
                "stacked": false,
                "region": "${AWS::Region}",
                "stat": "Sum",
                "period": 60,
                "title": "Lambda ${LambdaPostQuestComplete}: Counts"
              }
            },
            {
              "type": "metric",
              "x": 18,
              "y": 52,
              "width": 6,
              "height": 6,
              "properties": {
                "metrics": [
                  [ "AWS/Lambda", "Duration", "FunctionName", "${LambdaPostQuestComplete}", { "yAxis": "left", "color": "#1f77b4" } ]
                ],
                "view": "timeSeries",
                "stacked": false,
                "region": "${AWS::Region}",
                "stat": "Average",
                "period": 60,
                "title": "Lambda ${LambdaPostQuestComplete}: Duration"
              }
            },
            {
              "type": "text",
              "x": 0,
              "y": 58,
              "width": 24,
              "height": 2,
              "properties": {
                "markdown": "\n# Teams\nAll Lambda Functions Timeout: 30s"
              }
            },
            {
              "type": "metric",
              "x": 0,
              "y": 60,
              "width": 6,
              "height": 6,
              "properties": {
                "metrics": [
                  [ "AWS/Lambda", "Invocations", "FunctionName", "${LambdaGetAllTeams}", { "color": "#2ca02c" } ],
                  [ ".", "Throttles", ".", "." ],
                  [ ".", "Errors", ".", ".", { "color": "#d62728" } ]
                ],
                "view": "timeSeries",
                "stacked": false,
                "region": "${AWS::Region}",
                "stat": "Sum",
                "period": 60,
                "title": "Lambda ${LambdaGetAllTeams}: Counts"
              }
            },
            {
              "type": "metric",
              "x": 6,
              "y": 60,
              "width": 6,
              "height": 6,
              "properties": {
                "metrics": [
                  [ "AWS/Lambda", "Duration", "FunctionName", "${LambdaGetAllTeams}", { "yAxis": "left", "color": "#1f77b4" } ]
                ],
                "view": "timeSeries",
                "stacked": false,
                "region": "${AWS::Region}",
                "stat": "Average",
                "period": 60,
                "title": "Lambda ${LambdaGetAllTeams}: Duration"
              }
            },
            {
              "type": "metric",
              "x": 12,
              "y": 60,
              "width": 6,
              "height": 6,
              "properties": {
                "metrics": [
                  [ "AWS/Lambda", "Invocations", "FunctionName", "${LambdaGetOneTeam}", { "color": "#2ca02c" } ],
                  [ ".", "Throttles", ".", "." ],
                  [ ".", "Errors", ".", ".", { "color": "#d62728" } ]
                ],
                "view": "timeSeries",
                "stacked": false,
                "region": "${AWS::Region}",
                "stat": "Sum",
                "period": 60,
                "title": "Lambda ${LambdaGetOneTeam}: Counts"
              }
            },
            {
              "type": "metric",
              "x": 18,
              "y": 60,
              "width": 6,
              "height": 6,
              "properties": {
                "metrics": [
                  [ "AWS/Lambda", "Duration", "FunctionName", "${LambdaGetOneTeam}", { "yAxis": "left", "color": "#1f77b4" } ]
                ],
                "view": "timeSeries",
                "stacked": false,
                "region": "${AWS::Region}",
                "stat": "Average",
                "period": 60,
                "title": "Lambda ${LambdaGetOneTeam}: Duration"
              }
            },
            {
              "type": "text",
              "x": 0,
              "y": 66,
              "width": 24,
              "height": 2,
              "properties": {
                "markdown": "\n# States\nAll Lambda Functions Timeout: 30s"
              }
            },
            {
              "type": "metric",
              "x": 0,
              "y": 68,
              "width": 6,
              "height": 6,
              "properties": {
                "metrics": [
                  [ "AWS/Lambda", "Invocations", "FunctionName", "${LambdaGetStatesForQuest}", { "color": "#2ca02c" } ],
                  [ ".", "Throttles", ".", "." ],
                  [ ".", "Errors", ".", ".", { "color": "#d62728" } ]
                ],
                "view": "timeSeries",
                "stacked": false,
                "region": "${AWS::Region}",
                "stat": "Sum",
                "period": 60,
                "title": "Lambda ${LambdaGetStatesForQuest}: Counts"
              }
            },
            {
              "type": "metric",
              "x": 6,
              "y": 68,
              "width": 6,
              "height": 6,
              "properties": {
                "metrics": [
                  [ "AWS/Lambda", "Duration", "FunctionName", "${LambdaGetStatesForQuest}", { "yAxis": "left", "color": "#1f77b4" } ]
                ],
                "view": "timeSeries",
                "stacked": false,
                "region": "${AWS::Region}",
                "stat": "Average",
                "period": 60,
                "title": "Lambda ${LambdaGetStatesForQuest}: Duration"
              }
            },
            {
              "type": "metric",
              "x": 12,
              "y": 68,
              "width": 6,
              "height": 6,
              "properties": {
                "metrics": [
                  [ "AWS/Lambda", "Invocations", "FunctionName", "${LambdaGetStatesForTeam}", { "color": "#2ca02c" } ],
                  [ ".", "Throttles", ".", "." ],
                  [ ".", "Errors", ".", ".", { "color": "#d62728" } ]
                ],
                "view": "timeSeries",
                "stacked": false,
                "region": "${AWS::Region}",
                "stat": "Sum",
                "period": 60,
                "title": "Lambda ${LambdaGetStatesForTeam}: Counts"
              }
            },
            {
              "type": "metric",
              "x": 18,
              "y": 68,
              "width": 6,
              "height": 6,
              "properties": {
                "metrics": [
                  [ "AWS/Lambda", "Duration", "FunctionName", "${LambdaGetStatesForTeam}", { "yAxis": "left", "color": "#1f77b4" } ]
                ],
                "view": "timeSeries",
                "stacked": false,
                "region": "${AWS::Region}",
                "stat": "Average",
                "period": 60,
                "title": "Lambda ${LambdaGetStatesForTeam}: Duration"
              }
            },
            {
              "type": "text",
              "x": 0,
              "y": 74,
              "width": 24,
              "height": 2,
              "properties": {
                "markdown": "\n# Event\n${LambdaGetEventStatus} Timeout: 30s"
              }
            },
            {
              "type": "metric",
              "x": 0,
              "y": 76,
              "width": 6,
              "height": 6,
              "properties": {
                "metrics": [
                  [ "AWS/Lambda", "Invocations", "FunctionName", "${LambdaGetEventStatus}", { "color": "#2ca02c" } ],
                  [ ".", "Throttles", ".", "." ],
                  [ ".", "Errors", ".", ".", { "color": "#d62728" } ]
                ],
                "view": "timeSeries",
                "stacked": false,
                "region": "${AWS::Region}",
                "stat": "Sum",
                "period": 60,
                "title": "Lambda ${LambdaGetEventStatus}: Counts"
              }
            },
            {
              "type": "metric",
              "x": 6,
              "y": 76,
              "width": 6,
              "height": 6,
              "properties": {
                "metrics": [
                  [ "AWS/Lambda", "Duration", "FunctionName", "${LambdaGetEventStatus}", { "yAxis": "left", "color": "#1f77b4" } ]
                ],
                "view": "timeSeries",
                "stacked": false,
                "region": "${AWS::Region}",
                "stat": "Average",
                "period": 60,
                "title": "Lambda ${LambdaGetEventStatus}: Duration"
              }
            }
          ]
        }

  # ╔══════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════╗
  # ║ CloudWatch Events Resources                                                                                                                              ║
  # ╠═══════════════════════════════╤═════════════════════════════╤════════════════════════════════════════════════════════════════════════════════════════════╣
  # ║ EventsRuleLambdaCron          │ AWS::Events::Rule           │ Event that invokes the gdQuestsApi-Cron Lambda function on a schedule                      ║
  # ╚═══════════════════════════════╧═════════════════════════════╧════════════════════════════════════════════════════════════════════════════════════════════╝

  EventsRuleLambdaCron:
    Type: AWS::Events::Rule
    Properties:
      Description: Event that invokes the gdQuestsApi-Cron Lambda function on a schedule
      ScheduleExpression: rate(10 minutes)
      State: ENABLED
      Targets: 
      - Arn: !GetAtt LambdaCron.Arn
        Id: gdQuestsApi-Cron

  # ╔══════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════╗
  # ║ DynamoDB Resources                                                                                                                                       ║
  # ╠═══════════════════════════════╤═════════════════════════════╤════════════════════════════════════════════════════════════════════════════════════════════╣
  # ║ DynamoDbMockEventsTable       │ AWS::DynamoDB::Table        │ Mock Events Table deployed when outside of the context of the AWS Event Engine. Allows     ║
  # ║                               │                             │   Quest developers to simulate Event Engine event state.                                   ║
  # ║ DynamoDbHintsTable            │ AWS::DynamoDB::Table        │ The Hints table. Defines what hints are globally defined.                                  ║
  # ║ DynamoDbHintStatesTable       │ AWS::DynamoDB::Table        │ The Hint States table. Defines the status of hints given to each team in this GameDay      ║
  # ║                               │                             │   event.                                                                                   ║
  # ║ DynamoDbMockInputsTable       │ AWS::DynamoDB::Table        │ Mock Inputs Table deployed when outside of the context of the AWS Event Engine. Allows     ║
  # ║                               │                             │   Quest developers to simulate Input fields in the Event UI.                               ║
  # ║ DynamoDbMockTeamsTable        │ AWS::DynamoDB::Table        │ Mock Teams Table deployed when outside of the context of the AWS Event Engine. Allows      ║
  # ║                               │                             │   Quest developers to simulate teams whilst testing.                                       ║
  # ║ DynamoDbOutputsTable          │ AWS::DynamoDB::Table        │ The Outputs Table. Allows Quest developers to simulate Output fields in the Event UI.      ║
  # ║ DynamoDbQuestsTable           │ AWS::DynamoDB::Table        │ The Quests table. Defines what quests are globally defined.                                ║
  # ║ DynamoDbQuestStatesTable      │ AWS::DynamoDB::Table        │ The Quest States table. Defines the status of quests available to each team in this        ║
  # ║                               │                             │   GameDay event.                                                                           ║
  # ╚═══════════════════════════════╧═════════════════════════════╧════════════════════════════════════════════════════════════════════════════════════════════╝
  DynamoDbMockEventsTable:
    Type: AWS::DynamoDB::Table
    Properties:
      AttributeDefinitions:
      - AttributeName: event-id
        AttributeType: S
      BillingMode: PAY_PER_REQUEST
      KeySchema:
      - AttributeName: event-id
        KeyType: HASH
      TableName: gdQuestsApi-MockEvents

  DynamoDbHintsTable:
    Type: AWS::DynamoDB::Table
    Properties:
      AttributeDefinitions:
      - AttributeName: quest-id
        AttributeType: S
      - AttributeName: key
        AttributeType: S
      BillingMode: PAY_PER_REQUEST
      KeySchema:
      - AttributeName: quest-id
        KeyType: HASH
      - AttributeName: key
        KeyType: RANGE
      TableName: gdQuestsApi-Hints

  DynamoDbHintStatesTable:
    Type: AWS::DynamoDB::Table
    Properties:
      AttributeDefinitions:
      - AttributeName: hint-id
        AttributeType: S
      - AttributeName: team-id
        AttributeType: S
      BillingMode: PAY_PER_REQUEST
      KeySchema:
      - AttributeName: team-id
        KeyType: HASH
      - AttributeName: hint-id
        KeyType: RANGE
      TableName: gdQuestsApi-HintStates

  DynamoDbMockInputsTable:
    Type: AWS::DynamoDB::Table
    Properties:
      AttributeDefinitions:
      - AttributeName: team-id
        AttributeType: S
      - AttributeName: key
        AttributeType: S
      BillingMode: PAY_PER_REQUEST
      KeySchema:
      - AttributeName: team-id
        KeyType: HASH
      - AttributeName: key
        KeyType: RANGE
      TableName: gdQuestsApi-MockInputs

  DynamoDbOutputsTable:
    Type: AWS::DynamoDB::Table
    Properties:
      AttributeDefinitions:
      - AttributeName: team-id
        AttributeType: S
      - AttributeName: key
        AttributeType: S
      BillingMode: PAY_PER_REQUEST
      KeySchema:
      - AttributeName: team-id
        KeyType: HASH
      - AttributeName: key
        KeyType: RANGE
      TableName: gdQuestsApi-Outputs

  DynamoDbMockTeamsTable:
    Type: AWS::DynamoDB::Table
    Properties:
      AttributeDefinitions:
      - AttributeName: team-id
        AttributeType: S
      BillingMode: PAY_PER_REQUEST
      KeySchema:
      - AttributeName: team-id
        KeyType: HASH
      TableName: gdQuestsApi-MockTeams

  DynamoDbQuestsTable:
    Type: AWS::DynamoDB::Table
    Properties:
      AttributeDefinitions:
      - AttributeName: quest-id
        AttributeType: S
      BillingMode: PAY_PER_REQUEST
      KeySchema:
      - AttributeName: quest-id
        KeyType: HASH
      TableName: gdQuestsApi-Quests

  DynamoDbQuestStatesTable:
    Type: AWS::DynamoDB::Table
    Properties:
      AttributeDefinitions:
      - AttributeName: quest-id
        AttributeType: S
      - AttributeName: team-id
        AttributeType: S
      BillingMode: PAY_PER_REQUEST
      KeySchema:
      - AttributeName: team-id
        KeyType: HASH
      - AttributeName: quest-id
        KeyType: RANGE
      TableName: gdQuestsApi-QuestStates

  # ╔══════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════╗
  # ║ IAM Resources                                                                                                                                            ║
  # ╠═══════════════════════════════╤═════════════════════════════╤════════════════════════════════════════════════════════════════════════════════════════════╣
  # ║ IamRoleApiAuthorizer          │ AWS::IAM::Role              │ Allows the API Authorizer to access the Quests API Token                                   ║
  # ║ IamRoleApiGateway             │ AWS::IAM::Role              │ Provides permissions for API Gateway resources to log to CloudWatch Logs, invoke Lambda    ║
  # ║                               │                             │   functions, etc.                                                                          ║
  # ║ IamRoleLambda                 │ AWS::IAM::Role              │ Provides permissions for internally-invoked Lambda resources                               ║
  # ║ IamRoleMockOpsRole            │ AWS::IAM::Role              │ Mock role to simulate Event Engine cross-account assumpition of the ops role               ║
  # ║ IamRoleMockTeamRole           │ AWS::IAM::Role              │ Mock role to simulate Event Engine cross-account assumpition of the team role              ║
  # ║ IamRoleStepFunctions          │ AWS::IAM::Role              │ Provides permissions for Step Functions resources                                          ║
  # ╚═══════════════════════════════╧═════════════════════════════╧════════════════════════════════════════════════════════════════════════════════════════════╝
  IamRoleApiAuthorizer:
    Type: AWS::IAM::Role
    Properties: 
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - lambda.amazonaws.com
          Action:
          - sts:AssumeRole
      Description: Allows the API Authorizer to access the Quests API Token 
      Policies:
      - PolicyName: ApiAuthorizerPolicy
        PolicyDocument:
          Version: 2012-10-17
          Statement:
          - Effect: Allow
            Action:
            - secretsmanager:GetSecretValue
            Resource: !Ref SecretsManagerQuestsApiToken
      - PolicyName: CloudWatchLogsPolicy
        PolicyDocument:
          Version: 2012-10-17
          Statement:
          - Effect: Allow
            Action:
            - logs:CreateLogGroup
            Resource: !Join
            - ''
            - - 'arn:aws:logs:'
              - !Ref AWS::Region
              - ':'
              - !Ref AWS::AccountId
              - ':*'
          - Effect: Allow
            Action:
            - logs:CreateLogStream
            - logs:DescribeLogStreams
            - logs:PutLogEvents
            Resource: !Join
            - ''
            - - 'arn:aws:logs:'
              - !Ref AWS::Region
              - ':'
              - !Ref AWS::AccountId
              - ':log-group:/aws/lambda/gdQuestsApi-ApiAuthorizer:*'
      RoleName: gdQuestsApi-apiAuthorizerRole

  IamRoleCloudFormation:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - cloudformation.amazonaws.com
          Action:
          - sts:AssumeRole
      Description: Provides permissions for CloudFormation resources to deploy quests.
      ManagedPolicyArns:
      - arn:aws:iam::aws:policy/AdministratorAccess
      RoleName: gdQuestsApi-CloudFormationRole

  IamRoleApiGateway:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - apigateway.amazonaws.com
          Action:
          - sts:AssumeRole
      Description: Provides permissions for API Gateway resources to log to CloudWatch Logs, invoke Lambda functions, etc.
      Policies:
      - PolicyName: ApiGatewayLambdaInvocationPolicy
        PolicyDocument:
          Version: 2012-10-17
          Statement:
          - Effect: Allow
            Action:
            - lambda:InvokeFunction
            Resource: "*"
      - PolicyName: ApiGatewayLoggingPolicy
        PolicyDocument:
          Version: 2012-10-17
          Statement:
          - Effect: Allow
            Action:
            - "logs:CreateLogGroup"
            - "logs:CreateLogStream"
            - "logs:DescribeLogGroups"
            - "logs:DescribeLogStreams"
            - "logs:PutLogEvents"
            Resource: arn:aws:logs:*:*:*
      RoleName: gdQuestsApi-apiGatewayRole
      
  IamRoleLambda:
    Type: AWS::IAM::Role
    Properties: 
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - lambda.amazonaws.com
          Action:
          - sts:AssumeRole
      Description: Provides permissions for internally-invoked Lambda resources
      Policies:
      - PolicyName: CloudFormationPolicy
        PolicyDocument:
          Version: 2012-10-17
          Statement:
          - Effect: Allow
            Action: 
            - cloudformation:CreateStack
            - cloudformation:DeleteStack
            - cloudformation:DescribeStacks
            Resource: "*"
      - PolicyName: CloudWatchLogsPolicy
        PolicyDocument:
          Version: 2012-10-17
          Statement:
          - Effect: Allow
            Action:
            - logs:CreateLogGroup
            Resource: !Join
            - ''
            - - 'arn:aws:logs:'
              - !Ref AWS::Region
              - ':'
              - !Ref AWS::AccountId
              - ':*'
          - Effect: Allow
            Action:
            - logs:CreateLogStream
            - logs:DescribeLogStreams
            - logs:PutLogEvents
            Resource: !Join
            - ''
            - - 'arn:aws:logs:'
              - !Ref AWS::Region
              - ':'
              - !Ref AWS::AccountId
              - ':log-group:/aws/lambda/gdQuests*:*'
      - PolicyName: DynamoDBPolicy
        PolicyDocument:
          Version: 2012-10-17
          Statement:
          - Effect: Allow
            Action: 
            - dynamodb:DeleteItem
            - dynamodb:PutItem
            - dynamodb:Query
            - dynamodb:Scan
            - dynamodb:UpdateItem
            Resource: !Join
            - ''
            - - 'arn:aws:dynamodb:'
              - !Ref AWS::Region
              - ':'
              - !Ref AWS::AccountId
              - ':table/gdQuestsApi-*'
      - PolicyName: SecretsAnParametersPolicy
        PolicyDocument:
          Version: 2012-10-17
          Statement:
          - Effect: Allow
            Action: 
            - secretsmanager:GetSecretValue
            - ssm:GetParameter
            Resource: "*"
      - PolicyName: SNSPolicy
        PolicyDocument:
          Version: 2012-10-17
          Statement:
          - Effect: Allow
            Action: 
            - sns:Publish
            - sns:Subscribe
            Resource: !Join
            - ''
            - - 'arn:aws:sns:'
              - !Ref AWS::Region
              - ':'
              - !Ref AWS::AccountId
              - ':*'
      - PolicyName: OtherPolicy
        PolicyDocument:
          Version: 2012-10-17
          Statement:
          - Effect: Allow
            Action: 
            - iam:passRole
            - lambda:AddPermission
            - s3:GetObject
            - states:StartExecution
            - sts:assumeRole
            Resource: "*"
      RoleName: gdQuestsApi-lambdaRole

  IamRoleMockOpsRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
        - Effect: Allow
          Principal:
            AWS: !Join
            - ''
            - - 'arn:aws:iam::'
              - !Ref AWS::AccountId
              - ':root'
          Action:
          - sts:AssumeRole
      Description: Mock role to simulate Event Engine cross-account assumpition of the ops role.
      ManagedPolicyArns:
      - arn:aws:iam::aws:policy/AdministratorAccess
      RoleName: OpsRole
      
  IAMRoleStepFunctions:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - states.amazonaws.com
          Action:
          - sts:AssumeRole
      Description: Provides access to AWS services for Step Functions
      Policies:
      - PolicyName: StepFunctionsPolicy
        PolicyDocument:
          Version: 2012-10-17
          Statement:
          - Effect: Allow
            Action:
            - lambda:InvokeFunction
            - lambda:InvokeAsync
            Resource: '*'
      RoleName: gdQuestsApi-stepFunctionsRole

  # ╔══════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════╗
  # ║ Lambda Resources                                                                                                                                         ║
  # ╠═══════════════════════════════╤═════════════════════════════╤════════════════════════════════════════════════════════════════════════════════════════════╣
  # ║ LambdaApiAuthorizer           │ AWS::Lambda::Function       │ API:           Authorization function for the Quests API Gateway                           ║
  # ║ LambdaCheckStack              │ AWS::Lambda::Function       │ Orchestration: Obtains the status of a CloudFormation Stack deployment                     ║
  # ║ LambdaCron                    │ AWS::Lambda::Function       │ Orchestration: Runs Cron-based orchestration tasks for the Quests module                   ║
  # ║ LambdaCronPerms               │ AWS::Lambda::Permission     │ Orchestration: Authorises CloudWatch Events to invoke the gdQuestsApi-Cron Lambda function ║
  # ║ LambdaDeleteInput             │ AWS::Lambda::Function       │ API:           Deletes the specified team input in a GameDay event within the Event Engine ║
  # ║                               │                             │                API                                                                         ║
  # ║ LambdaDeleteCentralStack      │ AWS::Lambda::Function       │ Orchestration: Deletes the Central template for a Quest from the central account           ║
  # ║ LambdaDeleteTeamActivateStack │ AWS::Lambda::Function       │ Orchestration: Deletes the Team Activate template for a Quest from a team account          ║
  # ║ LambdaDeleteTeamEnableStack   │ AWS::Lambda::Function       │ Orchestration: Deletes the Team Enable template for a Quest from a team account            ║
  # ║ LambdaDeleteOutput            │ AWS::Lambda::Function       │ API:           Deletes the specified team output in a GameDay event within the Event       ║
  # ║                               │                             │                Engine API                                                                  ║
  # ║ LambdaDeployCentralStack      │ AWS::Lambda::Function       │ Orchestration: Deploys the Central template for a Quest in to the central account          ║
  # ║ LambdaDeployTeamActivateStack │ AWS::Lambda::Function       │ Orchestration: Deploys the Team Activate template for a Quest in to a team account         ║
  # ║ LambdaDeployTeamEnableStack   │ AWS::Lambda::Function       │ Orchestration: Deploys the Team Enable template for a Quest in to a team account           ║
  # ║ LambdaEnableQuest             │ AWS::Lambda::Function       │ Development:   Allows Quest developers to enable a quest during testing                    ║
  # ║ LambdaEnableQuestForTeams     │ AWS::Lambda::Function       │ Orchestration: Executes Step Function that deploys/deletes Team Enable CFn stacks          ║
  # ║ LambdaGetAllQuests            │ AWS::Lambda::Function       │ API:           Obtains high-level details of all quests                                    ║
  # ║ LambdaGetAllTeams             │ AWS::Lambda::Function       │ API:           Obtains high-level details of all teams                                     ║
  # ║ LambdaGetEventStatus          │ AWS::Lambda::Function       │ API:           Obtains the status of the GameDay event from the Event Engine API           ║
  # ║ LambdaGetHintsForQuest        │ AWS::Lambda::Function       │ API:           Retrieves a list of all hints configured for a quest                        ║
  # ║ LambdaGetHintStateForTeam     │ AWS::Lambda::Function       │ API:           Retrieves a specific hint state                                             ║
  # ║ LambdaGetInput                │ AWS::Lambda::Function       │ API:           Obtains the value of the specified team input in a GameDay event from the   ║
  # ║                               │                             │                Event Engine API                                                            ║
  # ║ LambdaGetOneQuest             │ AWS::Lambda::Function       │ API:           Obtains all of the details for a specific quest                             ║
  # ║ LambdaGetOneTeam              │ AWS::Lambda::Function       │ API:           Obtains all of the details for a specific team                              ║
  # ║ LambdaGetStatesForQuest       │ AWS::Lambda::Function       │ API:           Obtains the details of quest states for each team for a given quest         ║
  # ║ LambdaGetStatesForTeam        │ AWS::Lambda::Function       │ API:           Obtains the details of quest states for each quest for a given team         ║
  # ║ LambdaGetVisibleHintStates... │ AWS::Lambda::Function       │ API:           Retrieves a list of all hint states that are visible to a team              ║
  # ║ LambdaLoadQuestsData          │ AWS::Lambda::Function       │ Orchestration: Populates the Quests DynamoDB table upon module deployment                  ║
  # ║ LambdaMockEvents              │ AWS::Lambda::Function       │ Development:   Deployed when outside the context of the Event Engine, populates and allows ║
  # ║                               │                             │                for the modification of event data in the Mock Events table                 ║
  # ║ LambdaMockTeams               │ AWS::Lambda::Function       │ Development:   Deployed when outside the context of the Event Engine, populates and allows ║
  # ║                               │                             │                for the modification of team data in the Mock Teams table                   ║
  # ║ LambdaPostHintForQuest        │ AWS::Lambda::Function       │ API:           Adds a new hint definition to a quest                                       ║
  # ║ LambdaPostInput               │ AWS::Lambda::Function       │ API:           Creates the specified team input in a GameDay event within the Event Engine ║
  # ║                               │                             │                API                                                                         ║
  # ║ LambdaPostOutput              │ AWS::Lambda::Function       │ API:           Creates the specified team output in a GameDay event within the Event       ║
  # ║                               │                             │                Engine API                                                                  ║
  # ║ LambdaPostQuestComplete       │ AWS::Lambda::Function       │ API:           Indicate that a team has completed a quest                                  ║
  # ║ LambdaPostQuestScore          │ AWS::Lambda::Function       │ API:           Provide an update to a team's quest score                                   ║
  # ║ LambdaPostQuestStart          │ AWS::Lambda::Function       │ API:           Indicate that a team has started a quest                                    ║
  # ║ LambdaProcessSnsMessages      │ AWS::Lambda::Function       │ Messaging:     Processes messages sent to the EE Lifecycle Topic (or the Mock SNS Topic    ║
  # ║                               │                             │                when deployed outside the context of the Event Engine)                      ║
  # ║ LambdaProcessSnsMessagesPerms │ AWS::Lambda::Permission     │ Messaging:     Authorises the EE Lifecycle Topic or Mock SNS Topic to invoke the           ║
  # ║                               │                             │                gdQuestsApi-ProcessSnsMessages Lambda function                              ║
  # ║ LambdaRecalculateAverages     │ AWS::Lambda::Function       │ Orchestration: Function that can be manually executed to recalculate the new average quest ║
  # ║                               │                             │                duration at the end of an event                                             ║
  # ║ LambdaSubscribeUPLSns         │ AWS::Lambda::Function       │ Orchestration: Custom resource that subscribes the SNS Processing function to the SNS      ║
  # ║                               │                             │                topic used by GameDay 2020                                                  ║
  # ║ LambdaUpdateCentralStatus     │ AWS::Lambda::Function       │ Orchestration: Updates the central status of a quest in the Quests table                   ║
  # ║ LambdaUpdateHintForQuest      │ AWS::Lambda::Function       │ API:           Updates an existing hint definition for a quest                             ║
  # ║ LambdaUpdateHintStateForTeam  │ AWS::Lambda::Function       │ API:           Updates a specific hint state                                               ║
  # ║ LambdaUpdateTeamQuestStatus   │ AWS::Lambda::Function       │ Orchestration: Updates a team's quest status in the Quest Status table                     ║
  # ╚═══════════════════════════════╧═════════════════════════════╧════════════════════════════════════════════════════════════════════════════════════════════╝

  LambdaApiAuthorizer:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        S3Bucket: !Join
        - ''
        - - !Ref gdQuestsEEAssetsBucketPrefix
          - !Ref AWS::Region
        S3Key: !Join
        - ''
        - - !Ref gdQuestsEEAssetsKeyPrefix
          - !Ref gdQuestsLambdaSourceKey
      Description: "AWS GameDay Quests API: Authorization function for the Quests API Gateway"
      FunctionName: gdQuestsApi-ApiAuthorizer
      Handler: gdQuestsApi-ApiAuthorizer.lambda_handler
      Role: !GetAtt IamRoleApiAuthorizer.Arn
      Runtime: python3.6
      Timeout: '30'

  LambdaCheckStack:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        S3Bucket: !Join
        - ''
        - - !Ref gdQuestsEEAssetsBucketPrefix
          - !Ref AWS::Region
        S3Key: !Join
        - ''
        - - !Ref gdQuestsEEAssetsKeyPrefix
          - !Ref gdQuestsLambdaSourceKey
      Description: "AWS GameDay Quests Orchestration: Obtains the status of a CloudFormation Stack deployment"
      Environment:
        Variables:
          REGION: !Ref AWS::Region
      FunctionName: gdQuestsOrch-CheckStack
      Handler: gdQuestsOrch-CheckStack.lambda_handler
      Role: !GetAtt IamRoleLambda.Arn
      Runtime: python3.6
      Timeout: '30'

  LambdaCron:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        S3Bucket: !Join
        - ''
        - - !Ref gdQuestsEEAssetsBucketPrefix
          - !Ref AWS::Region
        S3Key: !Join
        - ''
        - - !Ref gdQuestsEEAssetsKeyPrefix
          - !Ref gdQuestsLambdaSourceKey
      Description: "AWS GameDay Quests Orchestration: Runs Cron-based orchestration tasks for the Quests module"
      Environment:
        Variables:
          EE_API_BASE: "Null"
          EE_API_TOKEN: "Null"
          EE_EVENT_ID: "Null"
          EE_MODULE_ID: "Null"
          HINT_STATES_TABLE: !Ref DynamoDbHintStatesTable
          QUESTS_TABLE: !Ref DynamoDbQuestsTable
          CENTRAL_TEMPLATE_STEP_FUNCTION_ARN: !Ref StepFunctionsCentralTemplate
      FunctionName: gdQuestsOrch-Cron
      Handler: gdQuestsOrch-Cron.lambda_handler
      Role: !GetAtt IamRoleLambda.Arn
      Runtime: python3.6
      Timeout: '30'

  LambdaCronPerms:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !GetAtt LambdaCron.Arn
      Principal: events.amazonaws.com
      SourceArn: !GetAtt EventsRuleLambdaCron.Arn

  LambdaDeleteInput:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        S3Bucket: !Join
        - ''
        - - !Ref gdQuestsEEAssetsBucketPrefix
          - !Ref AWS::Region
        S3Key: !Join
        - ''
        - - !Ref gdQuestsEEAssetsKeyPrefix
          - !Ref gdQuestsLambdaSourceKey
      Description: "AWS GameDay Quests API: Deletes the specified team input in a GameDay event within the Event Engine API"
      Environment:
        Variables:
          EE_API_BASE: "Null"
          EE_API_TOKEN: "Null"
          EE_EVENT_ID: "Null"
          EE_MODULE_ID: "Null"
          MOCK_INPUTS_TABLE: !Ref DynamoDbMockInputsTable
          QUEST_STATES_TABLE: !Ref DynamoDbQuestStatesTable
          QUESTS_CONTEXT: Standalone
      FunctionName: gdQuestsApi-DeleteInput
      Handler: gdQuestsApi-DeleteInput.lambda_handler
      Role: !GetAtt IamRoleLambda.Arn
      Runtime: python3.6
      Timeout: '30'

  LambdaDeleteCentralStack:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        S3Bucket: !Join
        - ''
        - - !Ref gdQuestsEEAssetsBucketPrefix
          - !Ref AWS::Region
        S3Key: !Join
        - ''
        - - !Ref gdQuestsEEAssetsKeyPrefix
          - !Ref gdQuestsLambdaSourceKey
      Description: "AWS GameDay Quests Orchestration: Deletes the Central template for a Quest from the central account"
      Environment:
        Variables:
          CLOUDFORMATION_ROLE_ARN: !GetAtt IamRoleCloudFormation.Arn
      FunctionName: gdQuestsOrch-DeleteCentralStack
      Handler: gdQuestsOrch-DeleteCentralStack.lambda_handler
      Role: !GetAtt IamRoleLambda.Arn
      Runtime: python3.6
      Timeout: '30'

  LambdaDeleteTeamActivateStack:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        S3Bucket: !Join
        - ''
        - - !Ref gdQuestsEEAssetsBucketPrefix
          - !Ref AWS::Region
        S3Key: !Join
        - ''
        - - !Ref gdQuestsEEAssetsKeyPrefix
          - !Ref gdQuestsLambdaSourceKey
      Description: "AWS GameDay Quests Orchestration: Deletes the Team Activate template for a Quest from a team account"
      Environment:
        Variables:
          REGION: !Ref AWS::Region
      FunctionName: gdQuestsOrch-DeleteTeamActivateStack
      Handler: gdQuestsOrch-DeleteTeamActivateStack.lambda_handler
      Role: !GetAtt IamRoleLambda.Arn
      Runtime: python3.6
      Timeout: '30'

  LambdaDeleteTeamEnableStack:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        S3Bucket: !Join
        - ''
        - - !Ref gdQuestsEEAssetsBucketPrefix
          - !Ref AWS::Region
        S3Key: !Join
        - ''
        - - !Ref gdQuestsEEAssetsKeyPrefix
          - !Ref gdQuestsLambdaSourceKey
      Description: "AWS GameDay Quests Orchestration: Deletes the Team Enable template for a Quest from a team account"
      Environment:
        Variables:
          REGION: !Ref AWS::Region
      FunctionName: gdQuestsOrch-DeleteTeamEnableStack
      Handler: gdQuestsOrch-DeleteTeamEnableStack.lambda_handler
      Role: !GetAtt IamRoleLambda.Arn
      Runtime: python3.6
      Timeout: '30'

  LambdaDeleteOutput:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        S3Bucket: !Join
        - ''
        - - !Ref gdQuestsEEAssetsBucketPrefix
          - !Ref AWS::Region
        S3Key: !Join
        - ''
        - - !Ref gdQuestsEEAssetsKeyPrefix
          - !Ref gdQuestsLambdaSourceKey
      Description: "AWS GameDay Quests API: Deletes the specified team output in a GameDay event within the Event Engine API"
      Environment:
        Variables:
          EE_API_BASE: "Null"
          EE_API_TOKEN: "Null"
          EE_EVENT_ID: "Null"
          EE_MODULE_ID: "Null"
          OUTPUTS_TABLE: !Ref DynamoDbOutputsTable
          QUEST_STATES_TABLE: !Ref DynamoDbQuestStatesTable
          QUESTS_CONTEXT: Standalone
      FunctionName: gdQuestsApi-DeleteOutput
      Handler: gdQuestsApi-DeleteOutput.lambda_handler
      Role: !GetAtt IamRoleLambda.Arn
      Runtime: python3.6
      Timeout: '30'

  LambdaDeployCentralStack:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        S3Bucket: !Join
        - ''
        - - !Ref gdQuestsEEAssetsBucketPrefix
          - !Ref AWS::Region
        S3Key: !Join
        - ''
        - - !Ref gdQuestsEEAssetsKeyPrefix
          - !Ref gdQuestsLambdaSourceKey
      Description: "AWS GameDay Quests Orchestration: Deploys the Central template for a Quest to the central account"
      Environment:
        Variables:
          CLOUDFORMATION_ROLE_ARN: !GetAtt IamRoleCloudFormation.Arn
          DEPLOY_ASSETS_BUCKET: !If
          - DeployFromEE
          - !Join
            - ''
            - - !Ref gdQuestsEEAssetsBucketPrefix
              - !Ref AWS::Region
          - !Ref devAssetsBucket
          DEPLOY_KEY_PREFIX: !If
          - DeployFromEE
          - !Ref gdQuestsEEAssetsKeyPrefix
          - !Ref devAssetsKeyPrefix
          QUESTS_API_BASE: !Join
          - ''
          - - 'https://'
            - !Ref ApiGatewayRestApi
            - '.execute-api.'
            - !Ref AWS::Region
            - '.amazonaws.com/LATEST'
          QUESTS_SECRET_ARN: !Ref SecretsManagerQuestsApiToken
          QUESTS_SNS_TOPIC_ARN: !Ref SnsQuestsApiTopic
          REGION: !Ref AWS::Region
      FunctionName: gdQuestsOrch-DeployCentralStack
      Handler: gdQuestsOrch-DeployCentralStack.lambda_handler
      Role: !GetAtt IamRoleLambda.Arn
      Runtime: python3.6
      Timeout: '30'

  LambdaDeployTeamActivateStack:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        S3Bucket: !Join
        - ''
        - - !Ref gdQuestsEEAssetsBucketPrefix
          - !Ref AWS::Region
        S3Key: !Join
        - ''
        - - !Ref gdQuestsEEAssetsKeyPrefix
          - !Ref gdQuestsLambdaSourceKey
      Description: "AWS GameDay Quests Orchestration: Deploys the Team Activate template for a Quest in to a team account"
      Environment:
        Variables:
          DEPLOY_ASSETS_BUCKET: !If
          - DeployFromEE
          - !Join
            - ''
            - - !Ref gdQuestsEEAssetsBucketPrefix
              - !Ref AWS::Region
          - !Ref devAssetsBucket
          DEPLOY_KEY_PREFIX: !If
          - DeployFromEE
          - !Ref gdQuestsEEAssetsKeyPrefix
          - !Ref devAssetsKeyPrefix
          REGION: !Ref AWS::Region
      FunctionName: gdQuestsOrch-DeployTeamActivateStack
      Handler: gdQuestsOrch-DeployTeamActivateStack.lambda_handler
      Role: !GetAtt IamRoleLambda.Arn
      Runtime: python3.6
      Timeout: '30'

  LambdaDeployTeamEnableStack:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        S3Bucket: !Join
        - ''
        - - !Ref gdQuestsEEAssetsBucketPrefix
          - !Ref AWS::Region
        S3Key: !Join
        - ''
        - - !Ref gdQuestsEEAssetsKeyPrefix
          - !Ref gdQuestsLambdaSourceKey
      Description: "AWS GameDay Quests Orchestration: Deploys the Team Enable template for a Quest in to a team account"
      Environment:
        Variables:
          DEPLOY_ASSETS_BUCKET: !If
          - DeployFromEE
          - !Join
            - ''
            - - !Ref gdQuestsEEAssetsBucketPrefix
              - !Ref AWS::Region
          - !Ref devAssetsBucket
          DEPLOY_KEY_PREFIX: !If
          - DeployFromEE
          - !Ref gdQuestsEEAssetsKeyPrefix
          - !Ref devAssetsKeyPrefix
          REGION: !Ref AWS::Region
      FunctionName: gdQuestsOrch-DeployTeamEnableStack
      Handler: gdQuestsOrch-DeployTeamEnableStack.lambda_handler
      Role: !GetAtt IamRoleLambda.Arn
      Runtime: python3.6
      Timeout: '30'

  LambdaEnableQuest:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        S3Bucket: !Join
        - ''
        - - !Ref gdQuestsEEAssetsBucketPrefix
          - !Ref AWS::Region
        S3Key: !Join
        - ''
        - - !Ref gdQuestsEEAssetsKeyPrefix
          - !Ref gdQuestsLambdaSourceKey
      Description: "AWS GameDay Quests Development: Allows Quest developers to enable a quest during testing"
      Environment:
        Variables:
          CENTRAL_TEMPLATE_STEP_FUNCTION_ARN: !Ref StepFunctionsCentralTemplate
          MOCK_TEAMS_TABLE: !Ref DynamoDbMockTeamsTable
          QUESTS_TABLE: !Ref DynamoDbQuestsTable
          QUEST_STATES_TABLE: !Ref DynamoDbQuestStatesTable
      FunctionName: gdQuestsDev-EnableQuest
      Handler: gdQuestsDev-EnableQuest.lambda_handler
      Role: !GetAtt IamRoleLambda.Arn
      Runtime: python3.6
      Timeout: '30'

  LambdaEnableQuestForTeams:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        S3Bucket: !Join
        - ''
        - - !Ref gdQuestsEEAssetsBucketPrefix
          - !Ref AWS::Region
        S3Key: !Join
        - ''
        - - !Ref gdQuestsEEAssetsKeyPrefix
          - !Ref gdQuestsLambdaSourceKey
      Description: "AWS GameDay Quests Orchestration: Executes Step Function that deploys/deletes Team Enable CFn stacks"
      Environment:
        Variables:
          EE_API_BASE: "Null"
          EE_API_TOKEN: "Null"
          EE_EVENT_ID: "Null"
          EE_MODULE_ID: "Null"
          MOCK_TEAMS_TABLE: !Ref DynamoDbMockTeamsTable
          TEAM_ENABLE_TEMPLATE_STEP_FUNCTION_ARN: !Ref StepFunctionsTeamEnableTemplate
      FunctionName: gdQuestsOrch-EnableQuestForTeams
      Handler: gdQuestsOrch-EnableQuestForTeams.lambda_handler
      Role: !GetAtt IamRoleLambda.Arn
      Runtime: python3.6
      Timeout: '30'
      
  LambdaGetAllQuests:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        S3Bucket: !Join
        - ''
        - - !Ref gdQuestsEEAssetsBucketPrefix
          - !Ref AWS::Region
        S3Key: !Join
        - ''
        - - !Ref gdQuestsEEAssetsKeyPrefix
          - !Ref gdQuestsLambdaSourceKey
      Description: "AWS GameDay Quests API: Obtains high-level details of all quests"
      Environment:
        Variables:
          QUESTS_TABLE: !Ref DynamoDbQuestsTable
      FunctionName: gdQuestsApi-GetAllQuests
      Handler: gdQuestsApi-GetAllQuests.lambda_handler
      Role: !GetAtt IamRoleLambda.Arn
      Runtime: python3.6
      Timeout: '30'

  LambdaGetAllTeams:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        S3Bucket: !Join
        - ''
        - - !Ref gdQuestsEEAssetsBucketPrefix
          - !Ref AWS::Region
        S3Key: !Join
        - ''
        - - !Ref gdQuestsEEAssetsKeyPrefix
          - !Ref gdQuestsLambdaSourceKey
      Description: "AWS GameDay Quests API: Obtains high-level details of all teams"
      Environment:
        Variables:
          EE_API_BASE: "Null"
          EE_API_TOKEN: "Null"
          EE_EVENT_ID: "Null"
          EE_MODULE_ID: "Null"
          MOCK_TEAMS_TABLE: !Ref DynamoDbMockTeamsTable
      FunctionName: gdQuestsApi-GetAllTeams
      Handler: gdQuestsApi-GetAllTeams.lambda_handler
      Role: !GetAtt IamRoleLambda.Arn
      Runtime: python3.6
      Timeout: '30'

  LambdaGetEventStatus:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        S3Bucket: !Join
        - ''
        - - !Ref gdQuestsEEAssetsBucketPrefix
          - !Ref AWS::Region
        S3Key: !Join
        - ''
        - - !Ref gdQuestsEEAssetsKeyPrefix
          - !Ref gdQuestsLambdaSourceKey
      Description: "AWS GameDay Quests API: Obtains the status of the GameDay event from the Event Engine API"
      Environment:
        Variables:
          EE_API_BASE: "Null"
          EE_API_TOKEN: "Null"
          EE_EVENT_ID: "Null"
          EE_MODULE_ID: "Null"
          MOCK_EVENTS_TABLE: !Ref DynamoDbMockEventsTable
      FunctionName: gdQuestsApi-GetEventStatus
      Handler: gdQuestsApi-GetEventStatus.lambda_handler
      Role: !GetAtt IamRoleLambda.Arn
      Runtime: python3.6
      Timeout: '30'

  LambdaGetHintsForQuest:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        S3Bucket: !Join
        - ''
        - - !Ref gdQuestsEEAssetsBucketPrefix
          - !Ref AWS::Region
        S3Key: !Join
        - ''
        - - !Ref gdQuestsEEAssetsKeyPrefix
          - !Ref gdQuestsLambdaSourceKey
      Description: "AWS GameDay Quests API: Retrieves a list of all hints configured for a quest"
      Environment:
        Variables:
          HINTS_TABLE: !Ref DynamoDbHintsTable
      FunctionName: gdQuestsApi-GetHintsForQuest
      Handler: gdQuestsApi-GetHintsForQuest.lambda_handler
      Role: !GetAtt IamRoleLambda.Arn
      Runtime: python3.6
      Timeout: '30'

  LambdaGetHintStateForTeam:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        S3Bucket: !Join
        - ''
        - - !Ref gdQuestsEEAssetsBucketPrefix
          - !Ref AWS::Region
        S3Key: !Join
        - ''
        - - !Ref gdQuestsEEAssetsKeyPrefix
          - !Ref gdQuestsLambdaSourceKey
      Description: "AWS GameDay Quests API: Retrieves a specific hint state"
      Environment:
        Variables:
          HINTS_TABLE: !Ref DynamoDbHintsTable
          HINT_STATES_TABLE: !Ref DynamoDbHintStatesTable
      FunctionName: gdQuestsApi-GetHintStateForTeam
      Handler: gdQuestsApi-GetHintStateForTeam.lambda_handler
      Role: !GetAtt IamRoleLambda.Arn
      Runtime: python3.6
      Timeout: '30'

  LambdaGetInput:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        S3Bucket: !Join
        - ''
        - - !Ref gdQuestsEEAssetsBucketPrefix
          - !Ref AWS::Region
        S3Key: !Join
        - ''
        - - !Ref gdQuestsEEAssetsKeyPrefix
          - !Ref gdQuestsLambdaSourceKey
      Description: "AWS GameDay Quests API: Obtains the value of the specified team input in a GameDay event from the Event Engine API"
      Environment:
        Variables:
          EE_API_BASE: "Null"
          EE_API_TOKEN: "Null"
          EE_EVENT_ID: "Null"
          EE_MODULE_ID: "Null"
          MOCK_INPUTS_TABLE: !Ref DynamoDbMockInputsTable
          QUEST_STATES_TABLE: !Ref DynamoDbQuestStatesTable
          QUESTS_CONTEXT: Standalone
      FunctionName: gdQuestsApi-GetInput
      Handler: gdQuestsApi-GetInput.lambda_handler
      Role: !GetAtt IamRoleLambda.Arn
      Runtime: python3.6
      Timeout: '30'

  LambdaGetOneQuest:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        S3Bucket: !Join
        - ''
        - - !Ref gdQuestsEEAssetsBucketPrefix
          - !Ref AWS::Region
        S3Key: !Join
        - ''
        - - !Ref gdQuestsEEAssetsKeyPrefix
          - !Ref gdQuestsLambdaSourceKey
      Description: "AWS GameDay Quests API: Obtains all of the details for a specific quest"
      Environment:
        Variables:
          QUESTS_TABLE: !Ref DynamoDbQuestsTable
      FunctionName: gdQuestsApi-GetOneQuest
      Handler: gdQuestsApi-GetOneQuest.lambda_handler
      Role: !GetAtt IamRoleLambda.Arn
      Runtime: python3.6
      Timeout: '30'

  LambdaGetOneTeam:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        S3Bucket: !Join
        - ''
        - - !Ref gdQuestsEEAssetsBucketPrefix
          - !Ref AWS::Region
        S3Key: !Join
        - ''
        - - !Ref gdQuestsEEAssetsKeyPrefix
          - !Ref gdQuestsLambdaSourceKey
      Description: "AWS GameDay Quests API: Obtains all of the details for a specific team"
      Environment:
        Variables:
          EE_API_BASE: "Null"
          EE_API_TOKEN: "Null"
          EE_EVENT_ID: "Null"
          EE_MODULE_ID: "Null"
          MOCK_TEAMS_TABLE: !Ref DynamoDbMockTeamsTable
      FunctionName: gdQuestsApi-GetOneTeam
      Handler: gdQuestsApi-GetOneTeam.lambda_handler
      Role: !GetAtt IamRoleLambda.Arn
      Runtime: python3.6
      Timeout: '30'

  LambdaGetStatesForQuest:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        S3Bucket: !Join
        - ''
        - - !Ref gdQuestsEEAssetsBucketPrefix
          - !Ref AWS::Region
        S3Key: !Join
        - ''
        - - !Ref gdQuestsEEAssetsKeyPrefix
          - !Ref gdQuestsLambdaSourceKey
      Description: "AWS GameDay Quests API: Obtains the details of quest states for each team for a given quest"
      Environment:
        Variables:
          QUEST_STATES_TABLE: !Ref DynamoDbQuestStatesTable
      FunctionName: gdQuestsApi-GetStatesForQuest
      Handler: gdQuestsApi-GetStatesForQuest.lambda_handler
      Role: !GetAtt IamRoleLambda.Arn
      Runtime: python3.6
      Timeout: '30'

  LambdaGetStatesForTeam:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        S3Bucket: !Join
        - ''
        - - !Ref gdQuestsEEAssetsBucketPrefix
          - !Ref AWS::Region
        S3Key: !Join
        - ''
        - - !Ref gdQuestsEEAssetsKeyPrefix
          - !Ref gdQuestsLambdaSourceKey
      Description: "AWS GameDay Quests API: Obtains the details of quest states for each quest for a given team"
      Environment:
        Variables:
          QUEST_STATES_TABLE: !Ref DynamoDbQuestStatesTable
          QUESTS_TABLE: !Ref DynamoDbQuestsTable
      FunctionName: gdQuestsApi-GetStatesForTeam
      Handler: gdQuestsApi-GetStatesForTeam.lambda_handler
      Role: !GetAtt IamRoleLambda.Arn
      Runtime: python3.6
      Timeout: '30'

  LambdaGetVisibleHintStatesForTeam:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        S3Bucket: !Join
        - ''
        - - !Ref gdQuestsEEAssetsBucketPrefix
          - !Ref AWS::Region
        S3Key: !Join
        - ''
        - - !Ref gdQuestsEEAssetsKeyPrefix
          - !Ref gdQuestsLambdaSourceKey
      Description: "AWS GameDay Quests API: Retrieves a list of all hint states that are visible to a team"
      Environment:
        Variables:
          HINTS_TABLE: !Ref DynamoDbHintsTable
          HINT_STATES_TABLE: !Ref DynamoDbHintStatesTable
      FunctionName: gdQuestsApi-GetVisibleHintStatesForTeam
      Handler: gdQuestsApi-GetVisibleHintStatesForTeam.lambda_handler
      Role: !GetAtt IamRoleLambda.Arn
      Runtime: python3.6
      Timeout: '30'

  LambdaLoadQuestHintData:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        S3Bucket: !Join
        - ''
        - - !Ref gdQuestsEEAssetsBucketPrefix
          - !Ref AWS::Region
        S3Key: !Join
        - ''
        - - !Ref gdQuestsEEAssetsKeyPrefix
          - !Ref gdQuestsLambdaSourceKey
      Description: "AWS GameDay Quests Orchestration: Populates the Hints DynamoDB table upon quest deployment "
      Environment:
        Variables:
          QUESTS_DATA_BUCKET: !Join
          - ''
          - - !Ref gdQuestsEEAssetsBucketPrefix
            - !Ref AWS::Region
          HINTS_TABLE: !Ref DynamoDbHintsTable
          TEMPLATE_PREFIX: !Ref gdQuestsEEAssetsKeyPrefix
      FunctionName: gdQuestsOrch-LoadQuestHintData
      Handler: gdQuestsOrch-LoadQuestHintData.lambda_handler
      Role: !GetAtt IamRoleLambda.Arn
      Runtime: python3.6
      Timeout: '30'
      
  LambdaLoadQuestsData:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        S3Bucket: !Join
        - ''
        - - !Ref gdQuestsEEAssetsBucketPrefix
          - !Ref AWS::Region
        S3Key: !Join
        - ''
        - - !Ref gdQuestsEEAssetsKeyPrefix
          - !Ref gdQuestsLambdaSourceKey
      Description: "AWS GameDay Quests Orchestration: Populates the Quests DynamoDB table upon module deployment "
      Environment:
        Variables:
          EE_API_BASE: "Null"
          EE_API_TOKEN: "Null"
          EE_EVENT_ID: "Null"
          EE_MODULE_ID: "Null"
          QUESTS_DATA_BUCKET: !If 
          - DeployFromEE
          - !Join
            - ''
            - - !Ref gdQuestsEEAssetsBucketPrefix
              - !Ref AWS::Region
          - !Ref devAssetsBucket
          QUESTS_DATA_KEY: !If
          - DeployFromEE
          - !Join
            - ''
            - - !Ref gdQuestsEEAssetsKeyPrefix
              - 'quests-data.json'
          - !Join
            - ''
            - - !Ref devAssetsKeyPrefix
              - !Ref devQuestsData
          QUESTS_TABLE: !Ref DynamoDbQuestsTable
      FunctionName: gdQuestsOrch-LoadQuestsData
      Handler: gdQuestsOrch-LoadQuestsData.lambda_handler
      Role: !GetAtt IamRoleLambda.Arn
      Runtime: python3.6
      Timeout: '30'
      
  LambdaMockEvents:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        S3Bucket: !Join
        - ''
        - - !Ref gdQuestsEEAssetsBucketPrefix
          - !Ref AWS::Region
        S3Key: !Join
        - ''
        - - !Ref gdQuestsEEAssetsKeyPrefix
          - !Ref gdQuestsLambdaSourceKey
      Description: "AWS GameDay Quests Development: Populates and allows for the modification of event data in the Mock Events table"
      Environment:
        Variables:
          MOCK_EVENTS_TABLE: !Ref DynamoDbMockEventsTable
          MOCK_SNS_TOPIC_ARN: !Ref SnsMockTopic
      FunctionName: gdQuestsDev-MockEvents
      Handler: gdQuestsDev-MockEvents.lambda_handler
      Role: !GetAtt IamRoleLambda.Arn
      Runtime: python3.6
      Timeout: '30'

  LambdaMockTeams:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        S3Bucket: !Join
        - ''
        - - !Ref gdQuestsEEAssetsBucketPrefix
          - !Ref AWS::Region
        S3Key: !Join
        - ''
        - - !Ref gdQuestsEEAssetsKeyPrefix
          - !Ref gdQuestsLambdaSourceKey
      Description: "AWS GameDay Quests Development: Populates and allows for the modification of team data in the Mock Teams table"
      Environment:
        Variables:
          ACCOUNT_ID: !Ref AWS::AccountId
          EE_MODULE_ID: "Null"
          MOCK_SNS_TOPIC_ARN: !Ref SnsMockTopic
          MOCK_TEAMS_TABLE: !Ref DynamoDbMockTeamsTable
      FunctionName: gdQuestsDev-MockTeams
      Handler: gdQuestsDev-MockTeams.lambda_handler
      Role: !GetAtt IamRoleLambda.Arn
      Runtime: python3.6
      Timeout: '30'

  LambdaPostHintForQuest:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        S3Bucket: !Join
        - ''
        - - !Ref gdQuestsEEAssetsBucketPrefix
          - !Ref AWS::Region
        S3Key: !Join
        - ''
        - - !Ref gdQuestsEEAssetsKeyPrefix
          - !Ref gdQuestsLambdaSourceKey
      Description: "AWS GameDay Quests API: Adds a new hint definition to a quest"
      Environment:
        Variables:
          HINTS_TABLE: !Ref DynamoDbHintsTable
          HINT_STATES_TABLE: !Ref DynamoDbHintStatesTable
          QUESTS_TABLE: !Ref DynamoDbQuestsTable
          QUEST_STATES_TABLE: !Ref DynamoDbQuestStatesTable
      FunctionName: gdQuestsApi-PostHintForQuest
      Handler: gdQuestsApi-PostHintForQuest.lambda_handler
      Role: !GetAtt IamRoleLambda.Arn
      Runtime: python3.6
      Timeout: '30'

  LambdaPostInput:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        S3Bucket: !Join
        - ''
        - - !Ref gdQuestsEEAssetsBucketPrefix
          - !Ref AWS::Region
        S3Key: !Join
        - ''
        - - !Ref gdQuestsEEAssetsKeyPrefix
          - !Ref gdQuestsLambdaSourceKey
      Description: "AWS GameDay Quests API: Creates the specified team input in a GameDay event within the Event Engine API"
      Environment:
        Variables:
          EE_API_BASE: "Null"
          EE_API_TOKEN: "Null"
          EE_EVENT_ID: "Null"
          EE_MODULE_ID: "Null"
          MOCK_INPUTS_TABLE: !Ref DynamoDbMockInputsTable
          QUEST_STATES_TABLE: !Ref DynamoDbQuestStatesTable
          QUESTS_CONTEXT: Standalone
      FunctionName: gdQuestsApi-PostInput
      Handler: gdQuestsApi-PostInput.lambda_handler
      Role: !GetAtt IamRoleLambda.Arn
      Runtime: python3.6
      Timeout: '30'

  LambdaPostOutput:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        S3Bucket: !Join
        - ''
        - - !Ref gdQuestsEEAssetsBucketPrefix
          - !Ref AWS::Region
        S3Key: !Join
        - ''
        - - !Ref gdQuestsEEAssetsKeyPrefix
          - !Ref gdQuestsLambdaSourceKey
      Description: "AWS GameDay Quests API: Creates the specified team output in a GameDay event within the Event Engine API"
      Environment:
        Variables:
          EE_API_BASE: "Null"
          EE_API_TOKEN: "Null"
          EE_EVENT_ID: "Null"
          EE_MODULE_ID: "Null"
          OUTPUTS_TABLE: !Ref DynamoDbOutputsTable
          QUEST_STATES_TABLE: !Ref DynamoDbQuestStatesTable
          QUESTS_CONTEXT: Standalone
      FunctionName: gdQuestsApi-PostOutput
      Handler: gdQuestsApi-PostOutput.lambda_handler
      Role: !GetAtt IamRoleLambda.Arn
      Runtime: python3.6
      Timeout: '30'

  LambdaPostQuestComplete:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        S3Bucket: !Join
        - ''
        - - !Ref gdQuestsEEAssetsBucketPrefix
          - !Ref AWS::Region
        S3Key: !Join
        - ''
        - - !Ref gdQuestsEEAssetsKeyPrefix
          - !Ref gdQuestsLambdaSourceKey
      Description: "AWS GameDay Quests API: Indicate that a team has completed a quest"
      Environment:
        Variables:
          EE_API_BASE: "Null"
          EE_API_TOKEN: "Null"
          EE_EVENT_ID: "Null"
          EE_MODULE_ID: "Null"
          HINT_STATES_TABLE: !Ref DynamoDbHintStatesTable
          HINTS_TABLE: !Ref DynamoDbHintsTable
          QUEST_STATES_TABLE: !Ref DynamoDbQuestStatesTable
          QUESTS_CONTEXT: Standalone
          QUESTS_TABLE: !Ref DynamoDbQuestsTable
      FunctionName: gdQuestsApi-PostQuestComplete
      Handler: gdQuestsApi-PostQuestComplete.lambda_handler
      Role: !GetAtt IamRoleLambda.Arn
      Runtime: python3.6
      Timeout: '30'

  LambdaPostQuestScore:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        S3Bucket: !Join
        - ''
        - - !Ref gdQuestsEEAssetsBucketPrefix
          - !Ref AWS::Region
        S3Key: !Join
        - ''
        - - !Ref gdQuestsEEAssetsKeyPrefix
          - !Ref gdQuestsLambdaSourceKey
      Description: "AWS GameDay Quests API: Provide an update to a team's quest score"
      Environment:
        Variables:
          EE_API_BASE: "Null"
          EE_API_TOKEN: "Null"
          EE_EVENT_ID: "Null"
          EE_MODULE_ID: "Null"
          HINT_STATES_TABLE: !Ref DynamoDbHintStatesTable
          HINTS_TABLE: !Ref DynamoDbHintsTable
          QUEST_STATES_TABLE: !Ref DynamoDbQuestStatesTable
          QUESTS_CONTEXT: Standalone
          QUESTS_TABLE: !Ref DynamoDbQuestsTable
      FunctionName: gdQuestsApi-PostQuestScore
      Handler: gdQuestsApi-PostQuestScore.lambda_handler
      Role: !GetAtt IamRoleLambda.Arn
      Runtime: python3.6
      Timeout: '30'

  LambdaPostQuestStart:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        S3Bucket: !Join
        - ''
        - - !Ref gdQuestsEEAssetsBucketPrefix
          - !Ref AWS::Region
        S3Key: !Join
        - ''
        - - !Ref gdQuestsEEAssetsKeyPrefix
          - !Ref gdQuestsLambdaSourceKey
      Description: "AWS GameDay Quests API: Indicate that a team has started a quest"
      Environment:
        Variables:
          EE_API_BASE: "Null"
          EE_API_TOKEN: "Null"
          EE_EVENT_ID: "Null"
          EE_MODULE_ID: "Null"
          MOCK_TEAMS_TABLE: !Ref DynamoDbMockTeamsTable
          QUESTS_SNS_TOPIC_ARN: !Ref SnsQuestsApiTopic
          QUEST_STATES_TABLE: !Ref DynamoDbQuestStatesTable
          QUESTS_CONTEXT: Standalone
          QUESTS_TABLE: !Ref DynamoDbQuestsTable
          TEAM_ACTIVATE_TEMPLATE_STEP_FUNCTION_ARN: !Ref StepFunctionsTeamActivateTemplate
      FunctionName: gdQuestsApi-PostQuestStart
      Handler: gdQuestsApi-PostQuestStart.lambda_handler
      Role: !GetAtt IamRoleLambda.Arn
      Runtime: python3.6
      Timeout: '30'

  LambdaProcessSnsMessages:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        S3Bucket: !Join
        - ''
        - - !Ref gdQuestsEEAssetsBucketPrefix
          - !Ref AWS::Region
        S3Key: !Join
        - ''
        - - !Ref gdQuestsEEAssetsKeyPrefix
          - !Ref gdQuestsLambdaSourceKey
      Description: "AWS GameDay Quests Messaging: Processes messages sent to the EE Lifecycle topic (or the Mock SNS Topic when deployed outside the context of the Event Engine)"
      Environment:
        Variables:
          EE_API_BASE: "Null"
          EE_API_TOKEN: "Null"
          EE_EVENT_ID: "Null"
          EE_MODULE_ID: "Null"
          QUESTS_SNS_TOPIC_ARN: !Ref SnsQuestsApiTopic
          QUESTS_TABLE: !Ref DynamoDbQuestsTable
          TEAM_ENABLE_TEMPLATE_STEP_FUNCTION_ARN: !Ref StepFunctionsTeamEnableTemplate
      FunctionName: gdQuestsMess-ProcessSnsMessages
      Handler: gdQuestsMess-ProcessSnsMessages.lambda_handler
      Role: !GetAtt IamRoleLambda.Arn
      Runtime: python3.6
      Timeout: '30'

  LambdaProcessSnsMessagesPerms:
    Type: AWS::Lambda::Permission
    Properties: 
      Action: lambda:InvokeFunction
      FunctionName: !Ref LambdaProcessSnsMessages
      Principal: sns.amazonaws.com
      SourceArn: !Ref SnsMockTopic

  LambdaRecalculateAverages:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        S3Bucket: !Join
        - ''
        - - !Ref gdQuestsEEAssetsBucketPrefix
          - !Ref AWS::Region
        S3Key: !Join
        - ''
        - - !Ref gdQuestsEEAssetsKeyPrefix
          - !Ref gdQuestsLambdaSourceKey
      Description: "AWS GameDay Quests Orchestration: Function that can be manually executed to recalculate the new average quest duration at the end of an event"
      Environment:
        Variables:
          QUEST_STATES_TABLE: !Ref DynamoDbQuestStatesTable
          QUESTS_TABLE: !Ref DynamoDbQuestsTable
      FunctionName: gdQuestsOrch-RecalculateAverages
      Handler: gdQuestsOrch-RecalculateAverages.lambda_handler
      Role: !GetAtt IamRoleLambda.Arn
      Runtime: python3.6
      Timeout: '30'

  LambdaSubscribeUPLSns:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        S3Bucket: !Join
        - ''
        - - !Ref gdQuestsEEAssetsBucketPrefix
          - !Ref AWS::Region
        S3Key: !Join
        - ''
        - - !Ref gdQuestsEEAssetsKeyPrefix
          - !Ref gdQuestsLambdaSourceKey
      Description: "AWS GameDay Quests Orchestration: Custom resource that attempts to subscribe the SNS Processing function to the GameDay 2020 Component API SNS Topic"
      Environment:
        Variables:
          EE_API_TOKEN: "Null"
          PROCESS_SNS_MESSAGES_LAMBDA_ARN: !GetAtt LambdaProcessSnsMessages.Arn
      FunctionName: gdQuestsOrch-SubscribeUPLSns
      Handler: gdQuestsOrch-SubscribeUPLSns.lambda_handler
      Role: !GetAtt IamRoleLambda.Arn
      Runtime: python3.6
      Timeout: '900'

  LambdaUpdateCentralStatus:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        S3Bucket: !Join
        - ''
        - - !Ref gdQuestsEEAssetsBucketPrefix
          - !Ref AWS::Region
        S3Key: !Join
        - ''
        - - !Ref gdQuestsEEAssetsKeyPrefix
          - !Ref gdQuestsLambdaSourceKey
      Description: "AWS GameDay Quests Orchestration: Updates the central status of a quest in the Quests table"
      Environment:
        Variables:
          QUESTS_TABLE: !Ref DynamoDbQuestsTable
      FunctionName: gdQuestsOrch-UpdateCentralStatus
      Handler: gdQuestsOrch-UpdateCentralStatus.lambda_handler
      Role: !GetAtt IamRoleLambda.Arn
      Runtime: python3.6
      Timeout: '30'

  LambdaUpdateHintForQuest:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        S3Bucket: !Join
        - ''
        - - !Ref gdQuestsEEAssetsBucketPrefix
          - !Ref AWS::Region
        S3Key: !Join
        - ''
        - - !Ref gdQuestsEEAssetsKeyPrefix
          - !Ref gdQuestsLambdaSourceKey
      Description: "AWS GameDay Quests API: Updates an existing hint definition for a quest"
      Environment:
        Variables:
          HINTS_TABLE: !Ref DynamoDbHintsTable
          HINT_STATES_TABLE: !Ref DynamoDbHintStatesTable
      FunctionName: gdQuestsApi-UpdateHintForQuest
      Handler: gdQuestsApi-UpdateHint.lambda_handler
      Role: !GetAtt IamRoleLambda.Arn
      Runtime: python3.6
      Timeout: '30'

  LambdaUpdateHintStateForTeam:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        S3Bucket: !Join
        - ''
        - - !Ref gdQuestsEEAssetsBucketPrefix
          - !Ref AWS::Region
        S3Key: !Join
        - ''
        - - !Ref gdQuestsEEAssetsKeyPrefix
          - !Ref gdQuestsLambdaSourceKey
      Description: "AWS GameDay Quests API: Updates a specific hint state"
      Environment:
        Variables:
          HINTS_TABLE: !Ref DynamoDbHintsTable
          HINT_STATES_TABLE: !Ref DynamoDbHintStatesTable
      FunctionName: gdQuestsApi-UpdateHintStateForTeam
      Handler: gdQuestsApi-UpdateHintState.lambda_handler
      Role: !GetAtt IamRoleLambda.Arn
      Runtime: python3.6
      Timeout: '30'

  LambdaUpdateTeamQuestStatus:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        S3Bucket: !Join
        - ''
        - - !Ref gdQuestsEEAssetsBucketPrefix
          - !Ref AWS::Region
        S3Key: !Join
        - ''
        - - !Ref gdQuestsEEAssetsKeyPrefix
          - !Ref gdQuestsLambdaSourceKey
      Description: "AWS GameDay Quests Orchestration: Updates the team status of a quest in the Quests table"
      Environment:
        Variables:
          HINTS_TABLE: !Ref DynamoDbHintsTable
          HINT_STATES_TABLE: !Ref DynamoDbHintStatesTable
          QUESTS_TABLE: !Ref DynamoDbQuestsTable
          QUEST_STATES_TABLE: !Ref DynamoDbQuestStatesTable
          QUESTS_SNS_TOPIC_ARN: !Ref SnsQuestsApiTopic
      FunctionName: gdQuestsOrch-UpdateTeamQuestStatus
      Handler: gdQuestsOrch-UpdateTeamQuestStatus.lambda_handler
      Role: !GetAtt IamRoleLambda.Arn
      Runtime: python3.6
      Timeout: '30'

  # ╔══════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════╗
  # ║ Secrets Manager Resources                                                                                                                                ║
  # ╠═══════════════════════════════╤═════════════════════════════╤════════════════════════════════════════════════════════════════════════════════════════════╣
  # ║ SecretsManagerQuestsApiToken  │ AWS::SecretsManager::Secret │ The secret used as the Quests API authorization token                                      ║
  # ╚═══════════════════════════════╧═════════════════════════════╧════════════════════════════════════════════════════════════════════════════════════════════╝
  SecretsManagerQuestsApiToken:
    Type: AWS::SecretsManager::Secret
    Properties: 
      Name: QuestsApiToken
      Description: The secret used as the Quests API authorization token
      GenerateSecretString:
        ExcludePunctuation: true

  # ╔══════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════╗
  # ║ SNS Resources                                                                                                                                            ║
  # ╠═══════════════════════════════╤═════════════════════════════╤════════════════════════════════════════════════════════════════════════════════════════════╣
  # ║ SnsMockTopic                  │ AWS::SNS::Topic             │ Deployed when outside the context of the Event Engine, mocks the functionality of the      ║
  # ║                               │                             │   Event Engine's Lifecycle Topic                                                           ║
  # ║ SnsQuestsApiTopic             │ AWS::SNS::Topic             │ SNS Topic that is published to from the Quests API and subscribed to by Quests             ║
  # ║ SnsSubProcessEEMessages       │ AWS::SNS::Subscription      │ SNS subscription for the gdQuestsApi-ProcessSnsMessages Lambda function                    ║
  # ╚═══════════════════════════════╧═════════════════════════════╧════════════════════════════════════════════════════════════════════════════════════════════╝
  SnsMockTopic:
    Type: AWS::SNS::Topic

  SnsQuestsApiTopic:
    Type: AWS::SNS::Topic

  SnsSubProcessEEMessages:
    Type: AWS::SNS::Subscription
    Properties:
      Endpoint: !GetAtt LambdaProcessSnsMessages.Arn
      Protocol: lambda
      TopicArn: !Ref SnsMockTopic 

  # ╔══════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════╗
  # ║ Systems Manager Resources                                                                                                                                ║
  # ╠══════════════════════════════════╤══════════════════════════╤════════════════════════════════════════════════════════════════════════════════════════════╣
  # ║ SSMParameterQuestsAPIEndpoint    │ AWS::SSM::Parameter      │ Publishes the Quests API endpoint to a Parameter Store location that can be referred to by ║
  # ║                                  │                          │   other Event Engine modules                                                               ║
  # ║ SSMParameterUPLComponentSnsTopic │ AWS::SSM::Parameter      │ Creates Mock GameDay 2020 SNS Topic Parameter so that SNS Processing function can be       ║
  # ║                                  │                          │   deployed to non-Event Engine accounts                                                    ║
  # ╚══════════════════════════════════╧══════════════════════════╧════════════════════════════════════════════════════════════════════════════════════════════╝
  SSMParameterQuestsAPIEndpoint:
    Type: AWS::SSM::Parameter
    Properties:
      Name: gdQuests-api-baseurl
      Type: String
      Value: !Join
      - ''
      - - "https://"
        - !Ref ApiGatewayRestApi
        - ".execute-api."
        - !Ref AWS::Region
        - ".amazonaws.com/LATEST/"

  SSMParameterUPLComponentSnsTopic:
    Type: AWS::SSM::Parameter
    Properties:
      Name: /gameday/2020/component-sns-topic
      Type: String
      Value: !Ref SnsMockTopic

  # ╔══════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════╗
  # ║ Step Functions Resources                                                                                                                                 ║
  # ╠═══════════════════════════════════╤══════════════════════════════════╤═══════════════════════════════════════════════════════════════════════════════════╣
  # ║ StepFunctionsCentralTemplate      │ AWS::StepFunctions::StateMachine │ Orchestrates the manipulation of the Central template for a Quest                 ║
  # ║ StepFunctionsTeamActivateTemplate │ AWS::StepFunctions::StateMachine │ Orchestrates the manipulation of the Team Activate template for a Quest           ║
  # ║ StepFunctionsTeamEnableTemplate   │ AWS::StepFunctions::StateMachine │ Orchestrates the manipulation of the Team Enable template for a Quest             ║
  # ╚═══════════════════════════════════╧══════════════════════════════════╧═══════════════════════════════════════════════════════════════════════════════════╝
  StepFunctionsCentralTemplate:
    Type: AWS::StepFunctions::StateMachine
    Properties:
      DefinitionString: !Sub |-
        {
          "Comment": "Orchestrates the manipulation of the Central template for a Quest.",
          "StartAt": "UpdateCentralStatus",
          "States": {
            "UpdateCentralStatus": {
              "Type": "Task",
              "Resource": "${LambdaUpdateCentralStatus.Arn}",
              "InputPath": "$.data",
              "ResultPath": "$.data",
              "Next": "ProcessAction"
            },
            "ProcessAction": {
              "Type": "Choice",
              "Choices": [
                {
                  "Variable": "$.data.action",
                  "StringEquals": "delete",
                  "Next": "DeleteCentralStack"
                },
                {
                  "Variable": "$.data.action",
                  "StringEquals": "deploy",
                  "Next": "DeployCentralStack"
                },
                {
                  "Variable": "$.data.action",
                  "StringEquals": "done",
                  "Next": "SuccessState"
                },
                {
                  "Variable": "$.data.action",
                  "StringEquals": "error",
                  "Next": "FailedState"
                },
                {
                  "Variable": "$.data.action",
                  "StringEquals": "eval",
                  "Next": "LoadQuestHintData"
                }
              ]
            },
            "DeleteCentralStack": {
              "Type": "Task",
              "Resource": "${LambdaDeleteCentralStack.Arn}",
              "InputPath": "$.data",
              "ResultPath": "$.data",
              "Next": "CheckCFnAction"
            },
            "DeployCentralStack": {
              "Type": "Task",
              "Resource": "${LambdaDeployCentralStack.Arn}",
              "InputPath": "$.data",
              "ResultPath": "$.data",
              "Next": "CheckCFnAction"
            },
            "CheckCFnAction": {
              "Type": "Choice",
              "Choices": [
                {
                  "Variable": "$.data.action",
                  "StringEquals": "error",
                  "Next": "UpdateCentralStatus"
                }
              ],
              "Default": "CFnWait"
            },
            "CFnWait": {
              "Type": "Wait",
              "Seconds": 60,
              "Next": "CheckStack"
            },
            "CheckStack": {
              "Type": "Task",
              "Resource": "${LambdaCheckStack.Arn}",
              "InputPath": "$.data",
              "ResultPath": "$.data",
              "Next": "ProcessStack"
            },
            "ProcessStack": {
              "Type": "Choice",
              "Choices": [
                {
                  "Variable": "$.data.action",
                  "StringEquals": "error",
                  "Next": "UpdateCentralStatus"
                },
                {
                  "Variable": "$.data.stack.state",
                  "StringEquals": "CREATE_COMPLETE",
                  "Next": "UpdateCentralStatus"
                },
                {
                  "Variable": "$.data.stack.state",
                  "StringEquals": "DELETE_COMPLETE",
                  "Next": "UpdateCentralStatus"
                },
                {
                  "Variable": "$.data.stack.state",
                  "StringEquals": "ROLLBACK_COMPLETE",
                  "Next": "UpdateCentralStatus"
                },
                {
                  "Variable": "$.data.stack.state",
                  "StringEquals": "ERRORED",
                  "Next": "UpdateCentralStatus"
                }
              ],
              "Default": "CFnWait"
            },
            "LoadQuestHintData": {
              "Type": "Task",
              "Resource": "${LambdaLoadQuestHintData.Arn}",
              "InputPath": "$.data",
              "ResultPath": "$.data",
              "Next": "EnableQuestForTeams"
            },
            "EnableQuestForTeams": {
              "Type": "Task",
              "Resource": "${LambdaEnableQuestForTeams.Arn}",
              "InputPath": "$.data",
              "ResultPath": "$.data",
              "End": true
            },
            "FailedState": {
              "Type": "Fail"
            },
            "SuccessState": {
              "Type": "Succeed"
            }
          }
        }
      RoleArn: !GetAtt IAMRoleStepFunctions.Arn
      StateMachineName: gdQuests-CentralTemplate

  StepFunctionsTeamActivateTemplate:
    Type: AWS::StepFunctions::StateMachine
    Properties:
      DefinitionString: !Sub |-
        {
          "Comment": "Orchestrates the manipulation of the Team Activate template for a Quest.",
          "StartAt": "UpdateTeamQuestStatus",
          "States": {
            "UpdateTeamQuestStatus": {
              "Type": "Task",
              "Resource": "${LambdaUpdateTeamQuestStatus.Arn}",
              "InputPath": "$.data",
              "ResultPath": "$.data",
              "Next": "ProcessAction"
            },
            "ProcessAction": {
              "Type": "Choice",
              "Choices": [
                {
                  "Variable": "$.data.action",
                  "StringEquals": "deploy",
                  "Next": "DeployTeamActivateStack"
                },
                {
                  "Variable": "$.data.action",
                  "StringEquals": "done",
                  "Next": "SuccessState"
                },
                {
                  "Variable": "$.data.action",
                  "StringEquals": "error",
                  "Next": "FailedState"
                }
              ]
            },
            "DeleteTeamActivateStack": {
              "Type": "Task",
              "Resource": "${LambdaDeleteTeamActivateStack.Arn}",
              "InputPath": "$.data",
              "ResultPath": "$.data",
              "Next": "CheckCFnAction"
            },
            "DeployTeamActivateStack": {
              "Type": "Task",
              "Resource": "${LambdaDeployTeamActivateStack.Arn}",
              "InputPath": "$.data",
              "ResultPath": "$.data",
              "Next": "CheckCFnAction"
            },
            "CheckCFnAction": {
              "Type": "Choice",
              "Choices": [
                {
                  "Variable": "$.data.action",
                  "StringEquals": "error",
                  "Next": "UpdateTeamQuestStatus"
                }
              ],
              "Default": "CFnWait"
            },
            "CFnWait": {
              "Type": "Wait",
              "Seconds": 60,
              "Next": "CheckStack"
            },
            "CheckStack": {
              "Type": "Task",
              "Resource": "${LambdaCheckStack.Arn}",
              "InputPath": "$.data",
              "ResultPath": "$.data",
              "Next": "ProcessStack"
            },
            "ProcessStack": {
              "Type": "Choice",
              "Choices": [
                {
                  "Variable": "$.data.action",
                  "StringEquals": "error",
                  "Next": "UpdateTeamQuestStatus"
                },
                {
                  "Variable": "$.data.stack.state",
                  "StringEquals": "CREATE_COMPLETE",
                  "Next": "UpdateTeamQuestStatus"
                },
                {
                  "Variable": "$.data.stack.state",
                  "StringEquals": "DELETE_COMPLETE",
                  "Next": "UpdateTeamQuestStatus"
                },
                {
                  "Variable": "$.data.stack.state",
                  "StringEquals": "ROLLBACK_COMPLETE",
                  "Next": "DeleteTeamActivateStack"
                },
                {
                  "Variable": "$.data.stack.state",
                  "StringEquals": "ERRORED",
                  "Next": "UpdateTeamQuestStatus"
                }
              ],
              "Default": "CFnWait"
            },
            "FailedState": {
              "Type": "Fail"
            },
            "SuccessState": {
              "Type": "Succeed"
            }
          }
        }
      RoleArn: !GetAtt IAMRoleStepFunctions.Arn
      StateMachineName: gdQuests-TeamActivateTemplate

  StepFunctionsTeamEnableTemplate:
    Type: AWS::StepFunctions::StateMachine
    Properties:
      DefinitionString: !Sub |-
        {
          "Comment": "Orchestrates the manipulation of the Team Enable template for a Quest.",
          "StartAt": "UpdateTeamQuestStatus",
          "States": {
            "UpdateTeamQuestStatus": {
              "Type": "Task",
              "Resource": "${LambdaUpdateTeamQuestStatus.Arn}",
              "InputPath": "$.data",
              "ResultPath": "$.data",
              "Next": "ProcessAction"
            },
            "ProcessAction": {
              "Type": "Choice",
              "Choices": [
                {
                  "Variable": "$.data.action",
                  "StringEquals": "deploy",
                  "Next": "DeployTeamEnableStack"
                },
                {
                  "Variable": "$.data.action",
                  "StringEquals": "done",
                  "Next": "SuccessState"
                },
                {
                  "Variable": "$.data.action",
                  "StringEquals": "error",
                  "Next": "FailedState"
                }
              ]
            },
            "DeleteTeamEnableStack": {
              "Type": "Task",
              "Resource": "${LambdaDeleteTeamEnableStack.Arn}",
              "InputPath": "$.data",
              "ResultPath": "$.data",
              "Next": "CheckCFnAction"
            },
            "DeployTeamEnableStack": {
              "Type": "Task",
              "Resource": "${LambdaDeployTeamEnableStack.Arn}",
              "InputPath": "$.data",
              "ResultPath": "$.data",
              "Next": "CheckCFnAction"
            },
            "CheckCFnAction": {
              "Type": "Choice",
              "Choices": [
                {
                  "Variable": "$.data.action",
                  "StringEquals": "error",
                  "Next": "UpdateTeamQuestStatus"
                }
              ],
              "Default": "CFnWait"
            },
            "CFnWait": {
              "Type": "Wait",
              "Seconds": 60,
              "Next": "CheckStack"
            },
            "CheckStack": {
              "Type": "Task",
              "Resource": "${LambdaCheckStack.Arn}",
              "InputPath": "$.data",
              "ResultPath": "$.data",
              "Next": "ProcessStack"
            },
            "ProcessStack": {
              "Type": "Choice",
              "Choices": [
                {
                  "Variable": "$.data.action",
                  "StringEquals": "error",
                  "Next": "UpdateTeamQuestStatus"
                },
                {
                  "Variable": "$.data.stack.state",
                  "StringEquals": "CREATE_COMPLETE",
                  "Next": "UpdateTeamQuestStatus"
                },
                {
                  "Variable": "$.data.stack.state",
                  "StringEquals": "DELETE_COMPLETE",
                  "Next": "UpdateTeamQuestStatus"
                },
                {
                  "Variable": "$.data.stack.state",
                  "StringEquals": "ROLLBACK_COMPLETE",
                  "Next": "DeleteTeamEnableStack"
                },
                {
                  "Variable": "$.data.stack.state",
                  "StringEquals": "ERRORED",
                  "Next": "UpdateTeamQuestStatus"
                }
              ],
              "Default": "CFnWait"
            },
            "FailedState": {
              "Type": "Fail"
            },
            "SuccessState": {
              "Type": "Succeed"
            }
          }
        }
      RoleArn: !GetAtt IAMRoleStepFunctions.Arn
      StateMachineName: gdQuests-TeamEnableTemplate

  # ╔══════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════╗
  # ║ Custom Resources                                                                                                                                         ║
  # ╠═══════════════════════════════╤═══════════════════════════════╤══════════════════════════════════════════════════════════════════════════════════════════╣
  # ║ PopulateMockEventsTable       │ Custom::LambdaMockEvents      │ Deployed when outside the context of the Event Engine, populates the Mock Events table   ║
  # ║                               │                               │   with initial data suited for testing outside of the Event Engine                       ║
  # ║ PopulateMockTeamsTable        │ Custom::LambdaMockTeams       │ Deployed when outside the context of the Event Engine, populates the Mock Teams table    ║
  # ║                               │                               │   with initial data suited for testing outside of the Event Engine                       ║
  # ║ PopulateQuestsTable           │ Custom::LambdaLoadQuestsData  │ Populates the Quests table with the data stored in quests-data.json                      ║
  # ║ SubscribeUPLSns               │ Custom::LambdaSubscribeUPLSns │ Subscribes the SNS Processing function to the GameDay 2020 SNS Topic (if it exists)      ║
  # ╚═══════════════════════════════╧═══════════════════════════════╧══════════════════════════════════════════════════════════════════════════════════════════╝
  PopulateMockEventsTable:
    Type: Custom::LambdaMockEvents
    Properties:
      ServiceToken: !GetAtt LambdaMockEvents.Arn

  PopulateMockTeamsTable:
    Type: Custom::LambdaMockTeams
    Properties:
      ServiceToken: !GetAtt LambdaMockTeams.Arn

  PopulateQuestsTable:
    Type: Custom::LambdaLoadQuestsData
    Properties:
      ServiceToken: !GetAtt LambdaLoadQuestsData.Arn

  SubscribeUPLSns:
    Type: Custom::LambdaSubscribeUPLSns
    Properties:
      ServiceToken: !GetAtt LambdaSubscribeUPLSns.Arn

      #Outputs:
  # To be populated
