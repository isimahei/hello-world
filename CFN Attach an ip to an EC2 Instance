{
  "AWSTemplateFormatVersion": "2018-12-09",
  "Parameters": {
    "AutoscalingGroup": {
      "Type": "String",
      "Description": "Enter a Name"
    }
  },
  "Resources": {
    "mySNSTopic": {
      "Type": "AWS::SNS::Topic",
      "Properties": {
        "TopicName": "SampleTopic"
      }
    },
    "EIPAssignTopicPublisherRole": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Version": "2018-12-09",
          "Statement": [
            {
              "Effect": "Allow",
              "Principal": {
                "Service": [
                  "autoscaling.amazonaws.com"
                ]
              },
              "Action": [
                "sts:AssumeRole"
              ]
            }
          ]
        },
        "Path": "/",
        "Policies": [
          {
            "PolicyName": "SNSRoleInlinePolicy",
            "PolicyDocument": {
              "Version": "2018-12-09",
              "Statement": [
                {
                  "Effect": "Allow",
                  "Action": [
                    "sns:Publish"
                  ],
                  "Resource": {
                    "Ref": "mySNSTopic"
                  }
                }
              ]
            }
          }
        ]
      }
    },
    "EIPAssignLambdaRole": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Version": "2018-12-",
          "Statement": [
            {
              "Effect": "Allow",
              "Principal": {
                "Service": [
                  "lambda.amazonaws.com"
                ]
              },
              "Action": [
                "sts:AssumeRole"
              ]
            }
          ]
        },
        "Path": "/",
        "Policies": [
          {
            "PolicyName": "LambdaRoleInlinePolicy",
            "PolicyDocument": {
              "Version": "2012-10-17",
              "Statement": [
                {
                  "Effect": "Allow",
                  "Action": [
                    "ec2:DescribeInstances",
                    "ec2:DescribeAddresses",
                    "ec2:AssociateAddress",
                    "autoscaling:CompleteLifecycleAction"
                  ],
                  "Resource": "*"
                },
                {
                  "Effect": "Allow",
                  "Action": [
                    "logs:CreateLogGroup",
                    "logs:CreateLogStream",
                    "logs:PutLogEvents"
                  ],
                  "Resource": "*"
                }
              ]
            }
          }
        ]
      }
    },
    "myLifecycleHook": {
      "Type": "AWS::AutoScaling::LifecycleHook",
      "Properties": {
        "AutoScalingGroupName": {
          "Ref": "AutoscalingGroup"
        },
        "DefaultResult": "ABANDON",
        "HeartbeatTimeout": 60,
        "LifecycleHookName": "EIPAssign-Hook",
        "LifecycleTransition": "autoscaling:EC2_INSTANCE_LAUNCHING",
        "NotificationTargetARN": {
          "Ref": "mySNSTopic"
        },
        "RoleARN": {
          "Fn::GetAtt": [
            "EIPAssignTopicPublisherRole",
            "Arn"
          ]
        }
      }
    },
    "myLambda": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "FunctionName": "EIPAssignFunction",
        "Code": {
          "ZipFile": {
            "Fn::Join": [
              "\n",
              [
                "// This is sample Node.js code for AWS Lambda, to attach a Elastic IP to EC2 instance ",
                "// if it is available. To use this function, create an Auto Scaling ",
                "// lifecycle hook on instance creation notifying a SNS topic, and ",
                "// subscribe the lambda function to the SNS topic. ",
                "// values for Memory and Timeout are 128MB and 30s respectively.",
                "var AWS = require('aws-sdk');",
                "exports.handler = function (notification, context) {",
                "  var Region = context['invokedFunctionArn'].split(':')[3];",
                "  AWS.config.update({region: Region});",
                "  // Log the request ",
                "  console.log(\"INFO: request Recieved.\\nDetails:\\n\", JSON.stringify(notification));",
                "  var message = JSON.parse(notification.Records[0].Sns.Message);",
                "  console.log(\"DEBUG: SNS message contents. \\nMessage:\\n\", message);",
                "  // Pull out InstanceId ",
                "  var instanceId = message.EC2InstanceId;",
                "  // Define a closure ",
                "  var terminate = function (success, err) {",
                "    var lifecycleParams = {",
                "      \"AutoScalingGroupName\" : message.AutoScalingGroupName,",
                "      \"LifecycleHookName\" : message.LifecycleHookName,",
                "      \"LifecycleActionToken\" : message.LifecycleActionToken,",
                "      \"LifecycleActionResult\" : \"ABANDON\"",
                "    };",
                "    if(!success){",
                "      console.log(\"ERROR: Lambda function reporting failure to AutoScaling with error:\\n\", err);",
                "    }else{",
                "      console.log(\"INFO: Lambda function reporting success to AutoScaling.\");",
                "      lifecycleParams.LifecycleActionResult = \"CONTINUE\";",
                "    }",
                "    var as = new AWS.AutoScaling({region: Region});",
                "    as.completeLifecycleAction(lifecycleParams, function(err, data){",
                "    if (err) {",
                "      console.log(\"ERROR: AS lifecycle completion failed.\\nDetails:\\n\", err);",
                "      console.log(\"DEBUG: CompleteLifecycleAction\\nParams:\\n\", lifecycleParams);",
                "      //context.fail();",
                "    } else {",
                "      console.log(\"INFO: CompleteLifecycleAction Successful.\\nReported:\\n\", data);",
                "      //context.succeed();",
                "    }",
                "  });",
                "  };",
                "  // Describe available EIP",
                "  var params = {",
                "  Filters: [",
                "    {Name: 'domain', Values: ['vpc']}",
                "  ]",
                "  };",
                "  var ec2 = new AWS.EC2({region: Region});",
                "  ec2.describeAddresses(params,function(err, data){",
                "    if(err){",
                "      console.log(\"Error\", err);",
                "      terminate(false,err);",
                "    } else {",
                "      for (var address of data.Addresses){",
                "        if(!address.AssociationId){",
                "          var availableAddress = address.PublicIp;",
                "          var availableAssociationId = address.AssociationId;",
                "          var allocationid = address.AllocationId;",
                "          console.log(\"Found an available EIP\", availableAddress);",
                "          break;",
                "        };",
                "        allocationid = null;",
                "      };",
                "      if(allocationid == null){",
                "        console.log(\"Not found any available EIP\");",
                "      };",
                "      // Associate EIP to EC2 instance",
                "      var paramsAssociateAddress = {",
                "        AllocationId: address.AllocationId,",
                "        InstanceId: instanceId",
                "      };",
                "      //console.log(paramsAssociateAddress);",
                "      ec2.associateAddress(paramsAssociateAddress,function(err,data){",
                "        if(err){",
                "          console.log(\"Error\", err);",
                "          terminate(false,err);",
                "        }else{",
                "          console.log(\"Found\",data.AssociationId);",
                "          terminate(true,err);",
                "        }",
                "      });",
                "    }",
                "  });",
                "};"
              ]
            ]
          }
        },
        "Handler": "index.handler",
        "Role": {
          "Fn::GetAtt": [
            "EIPAssignLambdaRole",
            "Arn"
          ]
        },
        "Runtime": "nodejs6.10",
        "Timeout": 30
      }
    },
    "mySNSSubscription": {
      "Type": "AWS::SNS::Subscription",
      "Properties": {
        "Endpoint": {
          "Fn::GetAtt": [
            "myLambda",
            "Arn"
          ]
        },
        "Protocol": "lambda",
        "TopicArn": {
          "Ref": "mySNSTopic"
        }
      }
    },
    "LambdaPermission": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "myLambda",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "sns.amazonaws.com",
        "SourceArn": {
          "Ref": "mySNSTopic"
        }
      }
    }
  },
  "Outputs": {
    "AutoScalingGroup": {
      "Value": {
        "Ref": "myLambda"
      }
    }
  }
}
